# -*- coding: utf-8 -*-
"""
Created on Wed Aug 15 06:24:13 2018
描述：缺失值的处理 3-1-1
@author: 刘刚
review：180925
"""
import pandas as pd
import numpy as np

from sklearn.preprocessing import Imputer
# 构造数据框
df = pd.DataFrame(np.random.randn(10, 4),
                  columns=['col1', 'col2', 'col3', 'col4'])

# 填充NaN值
df.iloc[1:2, 1] = np.nan
df.iloc[4, 3] = np.nan
print(df)
print(70*'=')

# 数据框的元素逐一转换成索引
nan_all = df.isnull()
print(nan_all)
print(70*'=')

# 判断轴上的元素缺失情况
nan_col1 = df.isnull().any()  # axis=0 轴上任何一个元素为NaN -> True
nan_col2 = df.isnull().all()  # axis=0 轴上全部元素为NaN -> True
print(nan_col1)
print(70*'=')
print(nan_col2)
print(70*'=')

# 构建数据框（丢弃第一个数据框的na值）
df2 = df.dropna()
print(df2)
print(70*'=')

# 应用Imputer模型 填充缺失值
nan_model = Imputer(missing_values='NaN', strategy='mean', axis=0)
nan_result = nan_model.fit_transform(df)
print(nan_result)  # type(nan_result) => ndarray
print('Nan Result')

# 采用fillna方法中内置的参数 填充缺失值
nan_result_pd1 = df.fillna(method='backfill')  # 等同于 bfill
nan_result_pd2 = df.fillna(method='bfill')
nan_result_pd3 = df.fillna(method='pad')  # ?
nan_result_pd4 = df.fillna(0)
nan_result_pd5 = df.fillna({'col2': 1.1, 'col4': 1.2})  # 分列填充
nan_result_pd6 = df.fillna(df.mean()['col2':'col4'])
print('采用fillna方法中内置的参数 填充缺失值')
print(nan_result_pd1)
print(70*'=')
print(nan_result_pd2)
print(70*'=')
print(nan_result_pd3)
print(70*'=')
print(nan_result_pd4)
print(70*'=')
print(nan_result_pd5)
print(70*'=')
print(nan_result_pd6)
print(70*'=')

# 构建数据集（复制数据集）
dfcopy = df.copy()

# 导入拉格朗日插值法,用拉格朗日填充缺失值
from scipy.interpolate import lagrange


def ployinterp_column(s, n, k=5):
    '''
    :description：ployinterp_column 用拉格朗日插值法进行插补
    :param s:矩阵每一列 DataFrame
    :param n：为被插值的位置
    :param k：取前后的数据个数，默认5
    :return：插值并返回结果
    '''
    y = s[list(range(n-k, n)) + list(range(n+1, n+1+k))]
    y = y[y.notnull()]
    return lagrange(y.index, list(y))(n)


for i in dfcopy.columns:  # 遍历每个列
    for j in range(len(dfcopy)):  # 遍历列中每一个值
        if (dfcopy[i].isnull())[j]:  # 找到缺失值
            dfcopy[i][j] = ployinterp_column(dfcopy[i], j)

print(70 * '-')
print(dfcopy)
