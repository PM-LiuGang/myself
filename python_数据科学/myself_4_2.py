# IPython log file

get_ipython().run_line_magic('cd', 'c')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('cd', 'myself_x/')
get_ipython().run_line_magic('ls', '')
import matplotlib.pyplot as plt
plt.style.use('seaborn-whitegrid')
fig = plt.figure()
ax = plt.axes()
ax.plot(x,np.sin(x))
x = np.linspace(0,10,1000)
import np
import numpy as np
import pandas as pd
x = np.linspace(0,10,1000)
plt.plot(x,np.sin(x))
#[Out]# [<matplotlib.lines.Line2D at 0x16f476d20b8>]
plt.show()
plt.plot(x,np.sin(x))
#[Out]# [<matplotlib.lines.Line2D at 0x16f4896d7b8>]
plt.plot(x,np.cos(x))
#[Out]# [<matplotlib.lines.Line2D at 0x16f48943dd8>]
plt.draw()
plt.show()
plt.plot(x,np.sin(x-0),color ='blue')
#[Out]# [<matplotlib.lines.Line2D at 0x16f4c60e0f0>]
#plt.plot(x,np.sin(x-1)color ='blue')
plt.plot(x,np.sin(x-1),color ='g')
#[Out]# [<matplotlib.lines.Line2D at 0x16f488bc898>]
plt.plot(x,np.sin(x-2),color ='0.75')
#[Out]# [<matplotlib.lines.Line2D at 0x16f488c9be0>]
plt.plot(x,np.sin(x-3),color ='#FFDD44')#十六进制
#[Out]# [<matplotlib.lines.Line2D at 0x16f48b5eb70>]
plt.plot(x,np.sin(x-4),color =(1.0,0.2,0.3))
#[Out]# [<matplotlib.lines.Line2D at 0x16f48c1fa20>]
plt.plot(x,np.sin(x-5),color ='chartreuse')
#[Out]# [<matplotlib.lines.Line2D at 0x16f4c3f8780>]
plt.draw()
plt.show()
plt.plot(x,x+0,'-g')
#[Out]# [<matplotlib.lines.Line2D at 0x16f4c64a0b8>]
plt.plot(x,x+1,'--c')
#[Out]# [<matplotlib.lines.Line2D at 0x16f48a284e0>]
plt.plot(x,x+2,'-.k')
#[Out]# [<matplotlib.lines.Line2D at 0x16f48a28b38>]
plt.plot(x,x+3,':r')
#[Out]# [<matplotlib.lines.Line2D at 0x16f48a28f98>]
plt.show()
plt.plot(x,np.sin(x))
#[Out]# [<matplotlib.lines.Line2D at 0x16f4d7ea1d0>]
plt.xlim(-1,11)
#[Out]# (-1, 11)
plt.xlim(-1.5,1.5)#plt.ylim(-1.5,1.5)
#[Out]# (-1.5, 1.5)
plt.show()
x
#[Out]# array([ 0.        ,  0.01001001,  0.02002002,  0.03003003,  0.04004004,
#[Out]#         0.05005005,  0.06006006,  0.07007007,  0.08008008,  0.09009009,
#[Out]#         0.1001001 ,  0.11011011,  0.12012012,  0.13013013,  0.14014014,
#[Out]#         0.15015015,  0.16016016,  0.17017017,  0.18018018,  0.19019019,
#[Out]#         0.2002002 ,  0.21021021,  0.22022022,  0.23023023,  0.24024024,
#[Out]#         0.25025025,  0.26026026,  0.27027027,  0.28028028,  0.29029029,
#[Out]#         0.3003003 ,  0.31031031,  0.32032032,  0.33033033,  0.34034034,
#[Out]#         0.35035035,  0.36036036,  0.37037037,  0.38038038,  0.39039039,
#[Out]#         0.4004004 ,  0.41041041,  0.42042042,  0.43043043,  0.44044044,
#[Out]#         0.45045045,  0.46046046,  0.47047047,  0.48048048,  0.49049049,
#[Out]#         0.5005005 ,  0.51051051,  0.52052052,  0.53053053,  0.54054054,
#[Out]#         0.55055055,  0.56056056,  0.57057057,  0.58058058,  0.59059059,
#[Out]#         0.6006006 ,  0.61061061,  0.62062062,  0.63063063,  0.64064064,
#[Out]#         0.65065065,  0.66066066,  0.67067067,  0.68068068,  0.69069069,
#[Out]#         0.7007007 ,  0.71071071,  0.72072072,  0.73073073,  0.74074074,
#[Out]#         0.75075075,  0.76076076,  0.77077077,  0.78078078,  0.79079079,
#[Out]#         0.8008008 ,  0.81081081,  0.82082082,  0.83083083,  0.84084084,
#[Out]#         0.85085085,  0.86086086,  0.87087087,  0.88088088,  0.89089089,
#[Out]#         0.9009009 ,  0.91091091,  0.92092092,  0.93093093,  0.94094094,
#[Out]#         0.95095095,  0.96096096,  0.97097097,  0.98098098,  0.99099099,
#[Out]#         1.001001  ,  1.01101101,  1.02102102,  1.03103103,  1.04104104,
#[Out]#         1.05105105,  1.06106106,  1.07107107,  1.08108108,  1.09109109,
#[Out]#         1.1011011 ,  1.11111111,  1.12112112,  1.13113113,  1.14114114,
#[Out]#         1.15115115,  1.16116116,  1.17117117,  1.18118118,  1.19119119,
#[Out]#         1.2012012 ,  1.21121121,  1.22122122,  1.23123123,  1.24124124,
#[Out]#         1.25125125,  1.26126126,  1.27127127,  1.28128128,  1.29129129,
#[Out]#         1.3013013 ,  1.31131131,  1.32132132,  1.33133133,  1.34134134,
#[Out]#         1.35135135,  1.36136136,  1.37137137,  1.38138138,  1.39139139,
#[Out]#         1.4014014 ,  1.41141141,  1.42142142,  1.43143143,  1.44144144,
#[Out]#         1.45145145,  1.46146146,  1.47147147,  1.48148148,  1.49149149,
#[Out]#         1.5015015 ,  1.51151151,  1.52152152,  1.53153153,  1.54154154,
#[Out]#         1.55155155,  1.56156156,  1.57157157,  1.58158158,  1.59159159,
#[Out]#         1.6016016 ,  1.61161161,  1.62162162,  1.63163163,  1.64164164,
#[Out]#         1.65165165,  1.66166166,  1.67167167,  1.68168168,  1.69169169,
#[Out]#         1.7017017 ,  1.71171171,  1.72172172,  1.73173173,  1.74174174,
#[Out]#         1.75175175,  1.76176176,  1.77177177,  1.78178178,  1.79179179,
#[Out]#         1.8018018 ,  1.81181181,  1.82182182,  1.83183183,  1.84184184,
#[Out]#         1.85185185,  1.86186186,  1.87187187,  1.88188188,  1.89189189,
#[Out]#         1.9019019 ,  1.91191191,  1.92192192,  1.93193193,  1.94194194,
#[Out]#         1.95195195,  1.96196196,  1.97197197,  1.98198198,  1.99199199,
#[Out]#         2.002002  ,  2.01201201,  2.02202202,  2.03203203,  2.04204204,
#[Out]#         2.05205205,  2.06206206,  2.07207207,  2.08208208,  2.09209209,
#[Out]#         2.1021021 ,  2.11211211,  2.12212212,  2.13213213,  2.14214214,
#[Out]#         2.15215215,  2.16216216,  2.17217217,  2.18218218,  2.19219219,
#[Out]#         2.2022022 ,  2.21221221,  2.22222222,  2.23223223,  2.24224224,
#[Out]#         2.25225225,  2.26226226,  2.27227227,  2.28228228,  2.29229229,
#[Out]#         2.3023023 ,  2.31231231,  2.32232232,  2.33233233,  2.34234234,
#[Out]#         2.35235235,  2.36236236,  2.37237237,  2.38238238,  2.39239239,
#[Out]#         2.4024024 ,  2.41241241,  2.42242242,  2.43243243,  2.44244244,
#[Out]#         2.45245245,  2.46246246,  2.47247247,  2.48248248,  2.49249249,
#[Out]#         2.5025025 ,  2.51251251,  2.52252252,  2.53253253,  2.54254254,
#[Out]#         2.55255255,  2.56256256,  2.57257257,  2.58258258,  2.59259259,
#[Out]#         2.6026026 ,  2.61261261,  2.62262262,  2.63263263,  2.64264264,
#[Out]#         2.65265265,  2.66266266,  2.67267267,  2.68268268,  2.69269269,
#[Out]#         2.7027027 ,  2.71271271,  2.72272272,  2.73273273,  2.74274274,
#[Out]#         2.75275275,  2.76276276,  2.77277277,  2.78278278,  2.79279279,
#[Out]#         2.8028028 ,  2.81281281,  2.82282282,  2.83283283,  2.84284284,
#[Out]#         2.85285285,  2.86286286,  2.87287287,  2.88288288,  2.89289289,
#[Out]#         2.9029029 ,  2.91291291,  2.92292292,  2.93293293,  2.94294294,
#[Out]#         2.95295295,  2.96296296,  2.97297297,  2.98298298,  2.99299299,
#[Out]#         3.003003  ,  3.01301301,  3.02302302,  3.03303303,  3.04304304,
#[Out]#         3.05305305,  3.06306306,  3.07307307,  3.08308308,  3.09309309,
#[Out]#         3.1031031 ,  3.11311311,  3.12312312,  3.13313313,  3.14314314,
#[Out]#         3.15315315,  3.16316316,  3.17317317,  3.18318318,  3.19319319,
#[Out]#         3.2032032 ,  3.21321321,  3.22322322,  3.23323323,  3.24324324,
#[Out]#         3.25325325,  3.26326326,  3.27327327,  3.28328328,  3.29329329,
#[Out]#         3.3033033 ,  3.31331331,  3.32332332,  3.33333333,  3.34334334,
#[Out]#         3.35335335,  3.36336336,  3.37337337,  3.38338338,  3.39339339,
#[Out]#         3.4034034 ,  3.41341341,  3.42342342,  3.43343343,  3.44344344,
#[Out]#         3.45345345,  3.46346346,  3.47347347,  3.48348348,  3.49349349,
#[Out]#         3.5035035 ,  3.51351351,  3.52352352,  3.53353353,  3.54354354,
#[Out]#         3.55355355,  3.56356356,  3.57357357,  3.58358358,  3.59359359,
#[Out]#         3.6036036 ,  3.61361361,  3.62362362,  3.63363363,  3.64364364,
#[Out]#         3.65365365,  3.66366366,  3.67367367,  3.68368368,  3.69369369,
#[Out]#         3.7037037 ,  3.71371371,  3.72372372,  3.73373373,  3.74374374,
#[Out]#         3.75375375,  3.76376376,  3.77377377,  3.78378378,  3.79379379,
#[Out]#         3.8038038 ,  3.81381381,  3.82382382,  3.83383383,  3.84384384,
#[Out]#         3.85385385,  3.86386386,  3.87387387,  3.88388388,  3.89389389,
#[Out]#         3.9039039 ,  3.91391391,  3.92392392,  3.93393393,  3.94394394,
#[Out]#         3.95395395,  3.96396396,  3.97397397,  3.98398398,  3.99399399,
#[Out]#         4.004004  ,  4.01401401,  4.02402402,  4.03403403,  4.04404404,
#[Out]#         4.05405405,  4.06406406,  4.07407407,  4.08408408,  4.09409409,
#[Out]#         4.1041041 ,  4.11411411,  4.12412412,  4.13413413,  4.14414414,
#[Out]#         4.15415415,  4.16416416,  4.17417417,  4.18418418,  4.19419419,
#[Out]#         4.2042042 ,  4.21421421,  4.22422422,  4.23423423,  4.24424424,
#[Out]#         4.25425425,  4.26426426,  4.27427427,  4.28428428,  4.29429429,
#[Out]#         4.3043043 ,  4.31431431,  4.32432432,  4.33433433,  4.34434434,
#[Out]#         4.35435435,  4.36436436,  4.37437437,  4.38438438,  4.39439439,
#[Out]#         4.4044044 ,  4.41441441,  4.42442442,  4.43443443,  4.44444444,
#[Out]#         4.45445445,  4.46446446,  4.47447447,  4.48448448,  4.49449449,
#[Out]#         4.5045045 ,  4.51451451,  4.52452452,  4.53453453,  4.54454454,
#[Out]#         4.55455455,  4.56456456,  4.57457457,  4.58458458,  4.59459459,
#[Out]#         4.6046046 ,  4.61461461,  4.62462462,  4.63463463,  4.64464464,
#[Out]#         4.65465465,  4.66466466,  4.67467467,  4.68468468,  4.69469469,
#[Out]#         4.7047047 ,  4.71471471,  4.72472472,  4.73473473,  4.74474474,
#[Out]#         4.75475475,  4.76476476,  4.77477477,  4.78478478,  4.79479479,
#[Out]#         4.8048048 ,  4.81481481,  4.82482482,  4.83483483,  4.84484484,
#[Out]#         4.85485485,  4.86486486,  4.87487487,  4.88488488,  4.89489489,
#[Out]#         4.9049049 ,  4.91491491,  4.92492492,  4.93493493,  4.94494494,
#[Out]#         4.95495495,  4.96496496,  4.97497497,  4.98498498,  4.99499499,
#[Out]#         5.00500501,  5.01501502,  5.02502503,  5.03503504,  5.04504505,
#[Out]#         5.05505506,  5.06506507,  5.07507508,  5.08508509,  5.0950951 ,
#[Out]#         5.10510511,  5.11511512,  5.12512513,  5.13513514,  5.14514515,
#[Out]#         5.15515516,  5.16516517,  5.17517518,  5.18518519,  5.1951952 ,
#[Out]#         5.20520521,  5.21521522,  5.22522523,  5.23523524,  5.24524525,
#[Out]#         5.25525526,  5.26526527,  5.27527528,  5.28528529,  5.2952953 ,
#[Out]#         5.30530531,  5.31531532,  5.32532533,  5.33533534,  5.34534535,
#[Out]#         5.35535536,  5.36536537,  5.37537538,  5.38538539,  5.3953954 ,
#[Out]#         5.40540541,  5.41541542,  5.42542543,  5.43543544,  5.44544545,
#[Out]#         5.45545546,  5.46546547,  5.47547548,  5.48548549,  5.4954955 ,
#[Out]#         5.50550551,  5.51551552,  5.52552553,  5.53553554,  5.54554555,
#[Out]#         5.55555556,  5.56556557,  5.57557558,  5.58558559,  5.5955956 ,
#[Out]#         5.60560561,  5.61561562,  5.62562563,  5.63563564,  5.64564565,
#[Out]#         5.65565566,  5.66566567,  5.67567568,  5.68568569,  5.6956957 ,
#[Out]#         5.70570571,  5.71571572,  5.72572573,  5.73573574,  5.74574575,
#[Out]#         5.75575576,  5.76576577,  5.77577578,  5.78578579,  5.7957958 ,
#[Out]#         5.80580581,  5.81581582,  5.82582583,  5.83583584,  5.84584585,
#[Out]#         5.85585586,  5.86586587,  5.87587588,  5.88588589,  5.8958959 ,
#[Out]#         5.90590591,  5.91591592,  5.92592593,  5.93593594,  5.94594595,
#[Out]#         5.95595596,  5.96596597,  5.97597598,  5.98598599,  5.995996  ,
#[Out]#         6.00600601,  6.01601602,  6.02602603,  6.03603604,  6.04604605,
#[Out]#         6.05605606,  6.06606607,  6.07607608,  6.08608609,  6.0960961 ,
#[Out]#         6.10610611,  6.11611612,  6.12612613,  6.13613614,  6.14614615,
#[Out]#         6.15615616,  6.16616617,  6.17617618,  6.18618619,  6.1961962 ,
#[Out]#         6.20620621,  6.21621622,  6.22622623,  6.23623624,  6.24624625,
#[Out]#         6.25625626,  6.26626627,  6.27627628,  6.28628629,  6.2962963 ,
#[Out]#         6.30630631,  6.31631632,  6.32632633,  6.33633634,  6.34634635,
#[Out]#         6.35635636,  6.36636637,  6.37637638,  6.38638639,  6.3963964 ,
#[Out]#         6.40640641,  6.41641642,  6.42642643,  6.43643644,  6.44644645,
#[Out]#         6.45645646,  6.46646647,  6.47647648,  6.48648649,  6.4964965 ,
#[Out]#         6.50650651,  6.51651652,  6.52652653,  6.53653654,  6.54654655,
#[Out]#         6.55655656,  6.56656657,  6.57657658,  6.58658659,  6.5965966 ,
#[Out]#         6.60660661,  6.61661662,  6.62662663,  6.63663664,  6.64664665,
#[Out]#         6.65665666,  6.66666667,  6.67667668,  6.68668669,  6.6966967 ,
#[Out]#         6.70670671,  6.71671672,  6.72672673,  6.73673674,  6.74674675,
#[Out]#         6.75675676,  6.76676677,  6.77677678,  6.78678679,  6.7967968 ,
#[Out]#         6.80680681,  6.81681682,  6.82682683,  6.83683684,  6.84684685,
#[Out]#         6.85685686,  6.86686687,  6.87687688,  6.88688689,  6.8968969 ,
#[Out]#         6.90690691,  6.91691692,  6.92692693,  6.93693694,  6.94694695,
#[Out]#         6.95695696,  6.96696697,  6.97697698,  6.98698699,  6.996997  ,
#[Out]#         7.00700701,  7.01701702,  7.02702703,  7.03703704,  7.04704705,
#[Out]#         7.05705706,  7.06706707,  7.07707708,  7.08708709,  7.0970971 ,
#[Out]#         7.10710711,  7.11711712,  7.12712713,  7.13713714,  7.14714715,
#[Out]#         7.15715716,  7.16716717,  7.17717718,  7.18718719,  7.1971972 ,
#[Out]#         7.20720721,  7.21721722,  7.22722723,  7.23723724,  7.24724725,
#[Out]#         7.25725726,  7.26726727,  7.27727728,  7.28728729,  7.2972973 ,
#[Out]#         7.30730731,  7.31731732,  7.32732733,  7.33733734,  7.34734735,
#[Out]#         7.35735736,  7.36736737,  7.37737738,  7.38738739,  7.3973974 ,
#[Out]#         7.40740741,  7.41741742,  7.42742743,  7.43743744,  7.44744745,
#[Out]#         7.45745746,  7.46746747,  7.47747748,  7.48748749,  7.4974975 ,
#[Out]#         7.50750751,  7.51751752,  7.52752753,  7.53753754,  7.54754755,
#[Out]#         7.55755756,  7.56756757,  7.57757758,  7.58758759,  7.5975976 ,
#[Out]#         7.60760761,  7.61761762,  7.62762763,  7.63763764,  7.64764765,
#[Out]#         7.65765766,  7.66766767,  7.67767768,  7.68768769,  7.6976977 ,
#[Out]#         7.70770771,  7.71771772,  7.72772773,  7.73773774,  7.74774775,
#[Out]#         7.75775776,  7.76776777,  7.77777778,  7.78778779,  7.7977978 ,
#[Out]#         7.80780781,  7.81781782,  7.82782783,  7.83783784,  7.84784785,
#[Out]#         7.85785786,  7.86786787,  7.87787788,  7.88788789,  7.8978979 ,
#[Out]#         7.90790791,  7.91791792,  7.92792793,  7.93793794,  7.94794795,
#[Out]#         7.95795796,  7.96796797,  7.97797798,  7.98798799,  7.997998  ,
#[Out]#         8.00800801,  8.01801802,  8.02802803,  8.03803804,  8.04804805,
#[Out]#         8.05805806,  8.06806807,  8.07807808,  8.08808809,  8.0980981 ,
#[Out]#         8.10810811,  8.11811812,  8.12812813,  8.13813814,  8.14814815,
#[Out]#         8.15815816,  8.16816817,  8.17817818,  8.18818819,  8.1981982 ,
#[Out]#         8.20820821,  8.21821822,  8.22822823,  8.23823824,  8.24824825,
#[Out]#         8.25825826,  8.26826827,  8.27827828,  8.28828829,  8.2982983 ,
#[Out]#         8.30830831,  8.31831832,  8.32832833,  8.33833834,  8.34834835,
#[Out]#         8.35835836,  8.36836837,  8.37837838,  8.38838839,  8.3983984 ,
#[Out]#         8.40840841,  8.41841842,  8.42842843,  8.43843844,  8.44844845,
#[Out]#         8.45845846,  8.46846847,  8.47847848,  8.48848849,  8.4984985 ,
#[Out]#         8.50850851,  8.51851852,  8.52852853,  8.53853854,  8.54854855,
#[Out]#         8.55855856,  8.56856857,  8.57857858,  8.58858859,  8.5985986 ,
#[Out]#         8.60860861,  8.61861862,  8.62862863,  8.63863864,  8.64864865,
#[Out]#         8.65865866,  8.66866867,  8.67867868,  8.68868869,  8.6986987 ,
#[Out]#         8.70870871,  8.71871872,  8.72872873,  8.73873874,  8.74874875,
#[Out]#         8.75875876,  8.76876877,  8.77877878,  8.78878879,  8.7987988 ,
#[Out]#         8.80880881,  8.81881882,  8.82882883,  8.83883884,  8.84884885,
#[Out]#         8.85885886,  8.86886887,  8.87887888,  8.88888889,  8.8988989 ,
#[Out]#         8.90890891,  8.91891892,  8.92892893,  8.93893894,  8.94894895,
#[Out]#         8.95895896,  8.96896897,  8.97897898,  8.98898899,  8.998999  ,
#[Out]#         9.00900901,  9.01901902,  9.02902903,  9.03903904,  9.04904905,
#[Out]#         9.05905906,  9.06906907,  9.07907908,  9.08908909,  9.0990991 ,
#[Out]#         9.10910911,  9.11911912,  9.12912913,  9.13913914,  9.14914915,
#[Out]#         9.15915916,  9.16916917,  9.17917918,  9.18918919,  9.1991992 ,
#[Out]#         9.20920921,  9.21921922,  9.22922923,  9.23923924,  9.24924925,
#[Out]#         9.25925926,  9.26926927,  9.27927928,  9.28928929,  9.2992993 ,
#[Out]#         9.30930931,  9.31931932,  9.32932933,  9.33933934,  9.34934935,
#[Out]#         9.35935936,  9.36936937,  9.37937938,  9.38938939,  9.3993994 ,
#[Out]#         9.40940941,  9.41941942,  9.42942943,  9.43943944,  9.44944945,
#[Out]#         9.45945946,  9.46946947,  9.47947948,  9.48948949,  9.4994995 ,
#[Out]#         9.50950951,  9.51951952,  9.52952953,  9.53953954,  9.54954955,
#[Out]#         9.55955956,  9.56956957,  9.57957958,  9.58958959,  9.5995996 ,
#[Out]#         9.60960961,  9.61961962,  9.62962963,  9.63963964,  9.64964965,
#[Out]#         9.65965966,  9.66966967,  9.67967968,  9.68968969,  9.6996997 ,
#[Out]#         9.70970971,  9.71971972,  9.72972973,  9.73973974,  9.74974975,
#[Out]#         9.75975976,  9.76976977,  9.77977978,  9.78978979,  9.7997998 ,
#[Out]#         9.80980981,  9.81981982,  9.82982983,  9.83983984,  9.84984985,
#[Out]#         9.85985986,  9.86986987,  9.87987988,  9.88988989,  9.8998999 ,
#[Out]#         9.90990991,  9.91991992,  9.92992993,  9.93993994,  9.94994995,
#[Out]#         9.95995996,  9.96996997,  9.97997998,  9.98998999, 10.        ])
plt.plot(x,np.sin(x))
#[Out]# [<matplotlib.lines.Line2D at 0x16f4d548a20>]
plt.xlim(-1,11)
#[Out]# (-1, 11)
plt.ylim(-1.5,1.5)
#[Out]# (-1.5, 1.5)
plt.show()
plt.plot(x,np.sin(x))
#[Out]# [<matplotlib.lines.Line2D at 0x16f4d5e3898>]
plt.axis([-1,11,-1.5,1.5])
#[Out]# [-1, 11, -1.5, 1.5]
plt.show()
plt.plot(x,np.sin(x))
#[Out]# [<matplotlib.lines.Line2D at 0x16f4d3ec940>]
plt.axis('tight')
#[Out]# (-0.5, 10.5, -1.0999971452300779, 1.099999549246729)
plt.show()
plt.plot(x,np.sin(x))
#[Out]# [<matplotlib.lines.Line2D at 0x16f4d47d6a0>]
plt.axis('equal')
#[Out]# (-0.5, 10.5, -1.0999971452300779, 1.099999549246729)
plt.show()
plt.plot(x,np.sin(x))
#[Out]# [<matplotlib.lines.Line2D at 0x16f4d2d67b8>]
plt.title('A sine Curve')
#[Out]# Text(0.5,1,'A sine Curve')
#plt.xlabel('x)
plt.xlabel('x')
#[Out]# Text(0.5,0,'x')
plt.ylabel('sin(x)')
#[Out]# Text(0,0.5,'sin(x)')
plt.show()
plt.plot(x,np.sin(x),'-g',label='sin(x)')
#[Out]# [<matplotlib.lines.Line2D at 0x16f4d342a20>]
plt.plot(x,np.cos(x),'-b',label='cos(x)')
#[Out]# [<matplotlib.lines.Line2D at 0x16f4d386208>]
plt.axis('equal')
#[Out]# (-0.5, 10.5, -1.0999987378908789, 1.0999999398995657)
plt.legend()
#[Out]# <matplotlib.legend.Legend at 0x16f4d3856d8>
plt.show()
ax = plt.axes()
ax.plot(x,np.sin(x))
#[Out]# [<matplotlib.lines.Line2D at 0x16f4db4a048>]
ax.set(xlim=(0,10),ylim=(-2,2),xlabel='x',ylabel='sin(x)',title='A Simple Plot')
#[Out]# [(-2, 2),
#[Out]#  Text(0,0.5,'sin(x)'),
#[Out]#  (0, 10),
#[Out]#  Text(0.5,0,'x'),
#[Out]#  Text(0.5,1,'A Simple Plot')]
ax.show()
plt.show()
x = np.linspace(0,10,30)
y = np.sin(x)
plt.plot(x,y,'o',color = 'black')
#[Out]# [<matplotlib.lines.Line2D at 0x16f4d9bd3c8>]
plt.show()
rng = np.random.RandomState(0)
for marker in ['o','.',',','x','+','v','^','<','>','s','d']:
    plt.plot(rng.rand(5),rng.rand(5),marker,label='marker="{0}"'.format(marker))
    plt.legend(numpoints=1)#numpoints?
    plt.xlim(0,1.8)
 
plt.show()
plt.plot(x,y,'-p',color='gray',markersize=15,linewidth=4,markerfacecolor='white',markeredgecolor='gray',markeredgewidth=2)
#[Out]# [<matplotlib.lines.Line2D at 0x16f4db91f28>]
plt.ylim(-1.2,1.2)
#[Out]# (-1.2, 1.2)
plt.show()
get_ipython().run_line_magic('pylab', '')
plt.scatter(x,y,marker='o')#散点图
#[Out]# <matplotlib.collections.PathCollection at 0x16f4d7ac5f8>
rng
#[Out]# <mtrand.RandomState at 0x16f4d6c8af8>
x= rng.randn(100)#100个点
y = rng.randn(100)#100个点
colors = rng.rand(100)
sizes = 1000 * rng.rand(100)
plt.scatter(x,y,c=colors,s=sizes,alpha=0.3,cmap='viridis')#散点图
#[Out]# <matplotlib.collections.PathCollection at 0x16f4ffed390>
plt.colorbar()#加上右边柱形图的颜色
#[Out]# <matplotlib.colorbar.Colorbar at 0x16f4db91860>
c
s
from sklearn.datasets import load_iris
iris = load_iris()
features = iris.data.T
#irir
iris
#[Out]# {'DESCR': 'Iris Plants Database\n====================\n\nNotes\n-----\nData Set Characteristics:\n    :Number of Instances: 150 (50 in each of three classes)\n    :Number of Attributes: 4 numeric, predictive attributes and the class\n    :Attribute Information:\n        - sepal length in cm\n        - sepal width in cm\n        - petal length in cm\n        - petal width in cm\n        - class:\n                - Iris-Setosa\n                - Iris-Versicolour\n                - Iris-Virginica\n    :Summary Statistics:\n\n    ============== ==== ==== ======= ===== ====================\n                    Min  Max   Mean    SD   Class Correlation\n    ============== ==== ==== ======= ===== ====================\n    sepal length:   4.3  7.9   5.84   0.83    0.7826\n    sepal width:    2.0  4.4   3.05   0.43   -0.4194\n    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\n    petal width:    0.1  2.5   1.20  0.76     0.9565  (high!)\n    ============== ==== ==== ======= ===== ====================\n\n    :Missing Attribute Values: None\n    :Class Distribution: 33.3% for each of 3 classes.\n    :Creator: R.A. Fisher\n    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\n    :Date: July, 1988\n\nThis is a copy of UCI ML iris datasets.\nhttp://archive.ics.uci.edu/ml/datasets/Iris\n\nThe famous Iris database, first used by Sir R.A Fisher\n\nThis is perhaps the best known database to be found in the\npattern recognition literature.  Fisher\'s paper is a classic in the field and\nis referenced frequently to this day.  (See Duda & Hart, for example.)  The\ndata set contains 3 classes of 50 instances each, where each class refers to a\ntype of iris plant.  One class is linearly separable from the other 2; the\nlatter are NOT linearly separable from each other.\n\nReferences\n----------\n   - Fisher,R.A. "The use of multiple measurements in taxonomic problems"\n     Annual Eugenics, 7, Part II, 179-188 (1936); also in "Contributions to\n     Mathematical Statistics" (John Wiley, NY, 1950).\n   - Duda,R.O., & Hart,P.E. (1973) Pattern Classification and Scene Analysis.\n     (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\n   - Dasarathy, B.V. (1980) "Nosing Around the Neighborhood: A New System\n     Structure and Classification Rule for Recognition in Partially Exposed\n     Environments".  IEEE Transactions on Pattern Analysis and Machine\n     Intelligence, Vol. PAMI-2, No. 1, 67-71.\n   - Gates, G.W. (1972) "The Reduced Nearest Neighbor Rule".  IEEE Transactions\n     on Information Theory, May 1972, 431-433.\n   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al"s AUTOCLASS II\n     conceptual clustering system finds 3 classes in the data.\n   - Many, many more ...\n',
#[Out]#  'data': array([[5.1, 3.5, 1.4, 0.2],
#[Out]#         [4.9, 3. , 1.4, 0.2],
#[Out]#         [4.7, 3.2, 1.3, 0.2],
#[Out]#         [4.6, 3.1, 1.5, 0.2],
#[Out]#         [5. , 3.6, 1.4, 0.2],
#[Out]#         [5.4, 3.9, 1.7, 0.4],
#[Out]#         [4.6, 3.4, 1.4, 0.3],
#[Out]#         [5. , 3.4, 1.5, 0.2],
#[Out]#         [4.4, 2.9, 1.4, 0.2],
#[Out]#         [4.9, 3.1, 1.5, 0.1],
#[Out]#         [5.4, 3.7, 1.5, 0.2],
#[Out]#         [4.8, 3.4, 1.6, 0.2],
#[Out]#         [4.8, 3. , 1.4, 0.1],
#[Out]#         [4.3, 3. , 1.1, 0.1],
#[Out]#         [5.8, 4. , 1.2, 0.2],
#[Out]#         [5.7, 4.4, 1.5, 0.4],
#[Out]#         [5.4, 3.9, 1.3, 0.4],
#[Out]#         [5.1, 3.5, 1.4, 0.3],
#[Out]#         [5.7, 3.8, 1.7, 0.3],
#[Out]#         [5.1, 3.8, 1.5, 0.3],
#[Out]#         [5.4, 3.4, 1.7, 0.2],
#[Out]#         [5.1, 3.7, 1.5, 0.4],
#[Out]#         [4.6, 3.6, 1. , 0.2],
#[Out]#         [5.1, 3.3, 1.7, 0.5],
#[Out]#         [4.8, 3.4, 1.9, 0.2],
#[Out]#         [5. , 3. , 1.6, 0.2],
#[Out]#         [5. , 3.4, 1.6, 0.4],
#[Out]#         [5.2, 3.5, 1.5, 0.2],
#[Out]#         [5.2, 3.4, 1.4, 0.2],
#[Out]#         [4.7, 3.2, 1.6, 0.2],
#[Out]#         [4.8, 3.1, 1.6, 0.2],
#[Out]#         [5.4, 3.4, 1.5, 0.4],
#[Out]#         [5.2, 4.1, 1.5, 0.1],
#[Out]#         [5.5, 4.2, 1.4, 0.2],
#[Out]#         [4.9, 3.1, 1.5, 0.1],
#[Out]#         [5. , 3.2, 1.2, 0.2],
#[Out]#         [5.5, 3.5, 1.3, 0.2],
#[Out]#         [4.9, 3.1, 1.5, 0.1],
#[Out]#         [4.4, 3. , 1.3, 0.2],
#[Out]#         [5.1, 3.4, 1.5, 0.2],
#[Out]#         [5. , 3.5, 1.3, 0.3],
#[Out]#         [4.5, 2.3, 1.3, 0.3],
#[Out]#         [4.4, 3.2, 1.3, 0.2],
#[Out]#         [5. , 3.5, 1.6, 0.6],
#[Out]#         [5.1, 3.8, 1.9, 0.4],
#[Out]#         [4.8, 3. , 1.4, 0.3],
#[Out]#         [5.1, 3.8, 1.6, 0.2],
#[Out]#         [4.6, 3.2, 1.4, 0.2],
#[Out]#         [5.3, 3.7, 1.5, 0.2],
#[Out]#         [5. , 3.3, 1.4, 0.2],
#[Out]#         [7. , 3.2, 4.7, 1.4],
#[Out]#         [6.4, 3.2, 4.5, 1.5],
#[Out]#         [6.9, 3.1, 4.9, 1.5],
#[Out]#         [5.5, 2.3, 4. , 1.3],
#[Out]#         [6.5, 2.8, 4.6, 1.5],
#[Out]#         [5.7, 2.8, 4.5, 1.3],
#[Out]#         [6.3, 3.3, 4.7, 1.6],
#[Out]#         [4.9, 2.4, 3.3, 1. ],
#[Out]#         [6.6, 2.9, 4.6, 1.3],
#[Out]#         [5.2, 2.7, 3.9, 1.4],
#[Out]#         [5. , 2. , 3.5, 1. ],
#[Out]#         [5.9, 3. , 4.2, 1.5],
#[Out]#         [6. , 2.2, 4. , 1. ],
#[Out]#         [6.1, 2.9, 4.7, 1.4],
#[Out]#         [5.6, 2.9, 3.6, 1.3],
#[Out]#         [6.7, 3.1, 4.4, 1.4],
#[Out]#         [5.6, 3. , 4.5, 1.5],
#[Out]#         [5.8, 2.7, 4.1, 1. ],
#[Out]#         [6.2, 2.2, 4.5, 1.5],
#[Out]#         [5.6, 2.5, 3.9, 1.1],
#[Out]#         [5.9, 3.2, 4.8, 1.8],
#[Out]#         [6.1, 2.8, 4. , 1.3],
#[Out]#         [6.3, 2.5, 4.9, 1.5],
#[Out]#         [6.1, 2.8, 4.7, 1.2],
#[Out]#         [6.4, 2.9, 4.3, 1.3],
#[Out]#         [6.6, 3. , 4.4, 1.4],
#[Out]#         [6.8, 2.8, 4.8, 1.4],
#[Out]#         [6.7, 3. , 5. , 1.7],
#[Out]#         [6. , 2.9, 4.5, 1.5],
#[Out]#         [5.7, 2.6, 3.5, 1. ],
#[Out]#         [5.5, 2.4, 3.8, 1.1],
#[Out]#         [5.5, 2.4, 3.7, 1. ],
#[Out]#         [5.8, 2.7, 3.9, 1.2],
#[Out]#         [6. , 2.7, 5.1, 1.6],
#[Out]#         [5.4, 3. , 4.5, 1.5],
#[Out]#         [6. , 3.4, 4.5, 1.6],
#[Out]#         [6.7, 3.1, 4.7, 1.5],
#[Out]#         [6.3, 2.3, 4.4, 1.3],
#[Out]#         [5.6, 3. , 4.1, 1.3],
#[Out]#         [5.5, 2.5, 4. , 1.3],
#[Out]#         [5.5, 2.6, 4.4, 1.2],
#[Out]#         [6.1, 3. , 4.6, 1.4],
#[Out]#         [5.8, 2.6, 4. , 1.2],
#[Out]#         [5. , 2.3, 3.3, 1. ],
#[Out]#         [5.6, 2.7, 4.2, 1.3],
#[Out]#         [5.7, 3. , 4.2, 1.2],
#[Out]#         [5.7, 2.9, 4.2, 1.3],
#[Out]#         [6.2, 2.9, 4.3, 1.3],
#[Out]#         [5.1, 2.5, 3. , 1.1],
#[Out]#         [5.7, 2.8, 4.1, 1.3],
#[Out]#         [6.3, 3.3, 6. , 2.5],
#[Out]#         [5.8, 2.7, 5.1, 1.9],
#[Out]#         [7.1, 3. , 5.9, 2.1],
#[Out]#         [6.3, 2.9, 5.6, 1.8],
#[Out]#         [6.5, 3. , 5.8, 2.2],
#[Out]#         [7.6, 3. , 6.6, 2.1],
#[Out]#         [4.9, 2.5, 4.5, 1.7],
#[Out]#         [7.3, 2.9, 6.3, 1.8],
#[Out]#         [6.7, 2.5, 5.8, 1.8],
#[Out]#         [7.2, 3.6, 6.1, 2.5],
#[Out]#         [6.5, 3.2, 5.1, 2. ],
#[Out]#         [6.4, 2.7, 5.3, 1.9],
#[Out]#         [6.8, 3. , 5.5, 2.1],
#[Out]#         [5.7, 2.5, 5. , 2. ],
#[Out]#         [5.8, 2.8, 5.1, 2.4],
#[Out]#         [6.4, 3.2, 5.3, 2.3],
#[Out]#         [6.5, 3. , 5.5, 1.8],
#[Out]#         [7.7, 3.8, 6.7, 2.2],
#[Out]#         [7.7, 2.6, 6.9, 2.3],
#[Out]#         [6. , 2.2, 5. , 1.5],
#[Out]#         [6.9, 3.2, 5.7, 2.3],
#[Out]#         [5.6, 2.8, 4.9, 2. ],
#[Out]#         [7.7, 2.8, 6.7, 2. ],
#[Out]#         [6.3, 2.7, 4.9, 1.8],
#[Out]#         [6.7, 3.3, 5.7, 2.1],
#[Out]#         [7.2, 3.2, 6. , 1.8],
#[Out]#         [6.2, 2.8, 4.8, 1.8],
#[Out]#         [6.1, 3. , 4.9, 1.8],
#[Out]#         [6.4, 2.8, 5.6, 2.1],
#[Out]#         [7.2, 3. , 5.8, 1.6],
#[Out]#         [7.4, 2.8, 6.1, 1.9],
#[Out]#         [7.9, 3.8, 6.4, 2. ],
#[Out]#         [6.4, 2.8, 5.6, 2.2],
#[Out]#         [6.3, 2.8, 5.1, 1.5],
#[Out]#         [6.1, 2.6, 5.6, 1.4],
#[Out]#         [7.7, 3. , 6.1, 2.3],
#[Out]#         [6.3, 3.4, 5.6, 2.4],
#[Out]#         [6.4, 3.1, 5.5, 1.8],
#[Out]#         [6. , 3. , 4.8, 1.8],
#[Out]#         [6.9, 3.1, 5.4, 2.1],
#[Out]#         [6.7, 3.1, 5.6, 2.4],
#[Out]#         [6.9, 3.1, 5.1, 2.3],
#[Out]#         [5.8, 2.7, 5.1, 1.9],
#[Out]#         [6.8, 3.2, 5.9, 2.3],
#[Out]#         [6.7, 3.3, 5.7, 2.5],
#[Out]#         [6.7, 3. , 5.2, 2.3],
#[Out]#         [6.3, 2.5, 5. , 1.9],
#[Out]#         [6.5, 3. , 5.2, 2. ],
#[Out]#         [6.2, 3.4, 5.4, 2.3],
#[Out]#         [5.9, 3. , 5.1, 1.8]]),
#[Out]#  'feature_names': ['sepal length (cm)',
#[Out]#   'sepal width (cm)',
#[Out]#   'petal length (cm)',
#[Out]#   'petal width (cm)'],
#[Out]#  'target': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#         0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#[Out]#         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#[Out]#         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
#[Out]#         2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
#[Out]#         2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]),
#[Out]#  'target_names': array(['setosa', 'versicolor', 'virginica'], dtype='<U10')}
features
#[Out]# array([[5.1, 4.9, 4.7, 4.6, 5. , 5.4, 4.6, 5. , 4.4, 4.9, 5.4, 4.8, 4.8,
#[Out]#         4.3, 5.8, 5.7, 5.4, 5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5. ,
#[Out]#         5. , 5.2, 5.2, 4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5. , 5.5, 4.9, 4.4,
#[Out]#         5.1, 5. , 4.5, 4.4, 5. , 5.1, 4.8, 5.1, 4.6, 5.3, 5. , 7. , 6.4,
#[Out]#         6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5. , 5.9, 6. , 6.1, 5.6,
#[Out]#         6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7,
#[Out]#         6. , 5.7, 5.5, 5.5, 5.8, 6. , 5.4, 6. , 6.7, 6.3, 5.6, 5.5, 5.5,
#[Out]#         6.1, 5.8, 5. , 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3,
#[Out]#         6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5,
#[Out]#         7.7, 7.7, 6. , 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2,
#[Out]#         7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6. , 6.9, 6.7, 6.9, 5.8,
#[Out]#         6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9],
#[Out]#        [3.5, 3. , 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4, 3. ,
#[Out]#         3. , 4. , 4.4, 3.9, 3.5, 3.8, 3.8, 3.4, 3.7, 3.6, 3.3, 3.4, 3. ,
#[Out]#         3.4, 3.5, 3.4, 3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.1, 3. ,
#[Out]#         3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3. , 3.8, 3.2, 3.7, 3.3, 3.2, 3.2,
#[Out]#         3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2. , 3. , 2.2, 2.9, 2.9,
#[Out]#         3.1, 3. , 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3. , 2.8, 3. ,
#[Out]#         2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3. , 3.4, 3.1, 2.3, 3. , 2.5, 2.6,
#[Out]#         3. , 2.6, 2.3, 2.7, 3. , 2.9, 2.9, 2.5, 2.8, 3.3, 2.7, 3. , 2.9,
#[Out]#         3. , 3. , 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3. , 2.5, 2.8, 3.2, 3. ,
#[Out]#         3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3. , 2.8, 3. ,
#[Out]#         2.8, 3.8, 2.8, 2.8, 2.6, 3. , 3.4, 3.1, 3. , 3.1, 3.1, 3.1, 2.7,
#[Out]#         3.2, 3.3, 3. , 2.5, 3. , 3.4, 3. ],
#[Out]#        [1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4,
#[Out]#         1.1, 1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1. , 1.7, 1.9, 1.6,
#[Out]#         1.6, 1.5, 1.4, 1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.5, 1.3,
#[Out]#         1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4, 4.7, 4.5,
#[Out]#         4.9, 4. , 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2, 4. , 4.7, 3.6,
#[Out]#         4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4. , 4.9, 4.7, 4.3, 4.4, 4.8, 5. ,
#[Out]#         4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7, 4.4, 4.1, 4. , 4.4,
#[Out]#         4.6, 4. , 3.3, 4.2, 4.2, 4.2, 4.3, 3. , 4.1, 6. , 5.1, 5.9, 5.6,
#[Out]#         5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3, 5.5, 5. , 5.1, 5.3, 5.5,
#[Out]#         6.7, 6.9, 5. , 5.7, 4.9, 6.7, 4.9, 5.7, 6. , 4.8, 4.9, 5.6, 5.8,
#[Out]#         6.1, 6.4, 5.6, 5.1, 5.6, 6.1, 5.6, 5.5, 4.8, 5.4, 5.6, 5.1, 5.1,
#[Out]#         5.9, 5.7, 5.2, 5. , 5.2, 5.4, 5.1],
#[Out]#        [0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1,
#[Out]#         0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2,
#[Out]#         0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.1, 0.2, 0.2, 0.1, 0.2,
#[Out]#         0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5,
#[Out]#         1.5, 1.3, 1.5, 1.3, 1.6, 1. , 1.3, 1.4, 1. , 1.5, 1. , 1.4, 1.3,
#[Out]#         1.4, 1.5, 1. , 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7,
#[Out]#         1.5, 1. , 1.1, 1. , 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2,
#[Out]#         1.4, 1.2, 1. , 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 2.1, 1.8,
#[Out]#         2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2. , 1.9, 2.1, 2. , 2.4, 2.3, 1.8,
#[Out]#         2.2, 2.3, 1.5, 2.3, 2. , 2. , 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6,
#[Out]#         1.9, 2. , 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 1.9,
#[Out]#         2.3, 2.5, 2.3, 1.9, 2. , 2.3, 1.8]])
features
#[Out]# array([[5.1, 4.9, 4.7, 4.6, 5. , 5.4, 4.6, 5. , 4.4, 4.9, 5.4, 4.8, 4.8,
#[Out]#         4.3, 5.8, 5.7, 5.4, 5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5. ,
#[Out]#         5. , 5.2, 5.2, 4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5. , 5.5, 4.9, 4.4,
#[Out]#         5.1, 5. , 4.5, 4.4, 5. , 5.1, 4.8, 5.1, 4.6, 5.3, 5. , 7. , 6.4,
#[Out]#         6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5. , 5.9, 6. , 6.1, 5.6,
#[Out]#         6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7,
#[Out]#         6. , 5.7, 5.5, 5.5, 5.8, 6. , 5.4, 6. , 6.7, 6.3, 5.6, 5.5, 5.5,
#[Out]#         6.1, 5.8, 5. , 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3,
#[Out]#         6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5,
#[Out]#         7.7, 7.7, 6. , 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2,
#[Out]#         7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6. , 6.9, 6.7, 6.9, 5.8,
#[Out]#         6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9],
#[Out]#        [3.5, 3. , 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4, 3. ,
#[Out]#         3. , 4. , 4.4, 3.9, 3.5, 3.8, 3.8, 3.4, 3.7, 3.6, 3.3, 3.4, 3. ,
#[Out]#         3.4, 3.5, 3.4, 3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.1, 3. ,
#[Out]#         3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3. , 3.8, 3.2, 3.7, 3.3, 3.2, 3.2,
#[Out]#         3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2. , 3. , 2.2, 2.9, 2.9,
#[Out]#         3.1, 3. , 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3. , 2.8, 3. ,
#[Out]#         2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3. , 3.4, 3.1, 2.3, 3. , 2.5, 2.6,
#[Out]#         3. , 2.6, 2.3, 2.7, 3. , 2.9, 2.9, 2.5, 2.8, 3.3, 2.7, 3. , 2.9,
#[Out]#         3. , 3. , 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3. , 2.5, 2.8, 3.2, 3. ,
#[Out]#         3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3. , 2.8, 3. ,
#[Out]#         2.8, 3.8, 2.8, 2.8, 2.6, 3. , 3.4, 3.1, 3. , 3.1, 3.1, 3.1, 2.7,
#[Out]#         3.2, 3.3, 3. , 2.5, 3. , 3.4, 3. ],
#[Out]#        [1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4,
#[Out]#         1.1, 1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1. , 1.7, 1.9, 1.6,
#[Out]#         1.6, 1.5, 1.4, 1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.5, 1.3,
#[Out]#         1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4, 4.7, 4.5,
#[Out]#         4.9, 4. , 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2, 4. , 4.7, 3.6,
#[Out]#         4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4. , 4.9, 4.7, 4.3, 4.4, 4.8, 5. ,
#[Out]#         4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7, 4.4, 4.1, 4. , 4.4,
#[Out]#         4.6, 4. , 3.3, 4.2, 4.2, 4.2, 4.3, 3. , 4.1, 6. , 5.1, 5.9, 5.6,
#[Out]#         5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3, 5.5, 5. , 5.1, 5.3, 5.5,
#[Out]#         6.7, 6.9, 5. , 5.7, 4.9, 6.7, 4.9, 5.7, 6. , 4.8, 4.9, 5.6, 5.8,
#[Out]#         6.1, 6.4, 5.6, 5.1, 5.6, 6.1, 5.6, 5.5, 4.8, 5.4, 5.6, 5.1, 5.1,
#[Out]#         5.9, 5.7, 5.2, 5. , 5.2, 5.4, 5.1],
#[Out]#        [0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1,
#[Out]#         0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2,
#[Out]#         0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.1, 0.2, 0.2, 0.1, 0.2,
#[Out]#         0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5,
#[Out]#         1.5, 1.3, 1.5, 1.3, 1.6, 1. , 1.3, 1.4, 1. , 1.5, 1. , 1.4, 1.3,
#[Out]#         1.4, 1.5, 1. , 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7,
#[Out]#         1.5, 1. , 1.1, 1. , 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2,
#[Out]#         1.4, 1.2, 1. , 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 2.1, 1.8,
#[Out]#         2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2. , 1.9, 2.1, 2. , 2.4, 2.3, 1.8,
#[Out]#         2.2, 2.3, 1.5, 2.3, 2. , 2. , 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6,
#[Out]#         1.9, 2. , 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 1.9,
#[Out]#         2.3, 2.5, 2.3, 1.9, 2. , 2.3, 1.8]])
features.shape
#[Out]# (4, 150)
plt.scatter(features[0],features[1],alpha=0.2,s=100*features[3],c=iris.target,cmap='viridis')
#[Out]# <matplotlib.collections.PathCollection at 0x16f530a1080>
get_ipython().run_line_magic('pinfo', 'plt.scatter')
data.target
iris.target
#[Out]# array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#[Out]#        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#[Out]#        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#[Out]#        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
#[Out]#        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
#[Out]#        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
features.columns
features.shape
#[Out]# (4, 150)
features[3]
#[Out]# array([0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1,
#[Out]#        0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2,
#[Out]#        0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.1, 0.2, 0.2, 0.1, 0.2,
#[Out]#        0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5,
#[Out]#        1.5, 1.3, 1.5, 1.3, 1.6, 1. , 1.3, 1.4, 1. , 1.5, 1. , 1.4, 1.3,
#[Out]#        1.4, 1.5, 1. , 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7,
#[Out]#        1.5, 1. , 1.1, 1. , 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2,
#[Out]#        1.4, 1.2, 1. , 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 2.1, 1.8,
#[Out]#        2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2. , 1.9, 2.1, 2. , 2.4, 2.3, 1.8,
#[Out]#        2.2, 2.3, 1.5, 2.3, 2. , 2. , 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6,
#[Out]#        1.9, 2. , 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 1.9,
#[Out]#        2.3, 2.5, 2.3, 1.9, 2. , 2.3, 1.8])
plt.xlabel(iris.feature_names[0])
#[Out]# Text(0.5,0,'sepal length (cm)')
x = np.linspace(0,10,50)
dy = 0.8
#y = np.sin() + dy * np.random.randn(50)
y = np.sin(x) + dy * np.random.randn(50)
plt.errorbar(x,y,yerr=dy,fmt=',k')
#[Out]# <Container object of 3 artists>
plt.errorbar(x,y,yerr=dy,fmt='.k')
#[Out]# <Container object of 3 artists>
plt.errorbar(x,y,yerr=dy,fmt='.k',color='black',ecolor='lightgray',elinewidth=3,capsize=0)
#[Out]# <Container object of 3 artists>

from sklearn.gaussian_process import GaussianProcess
model = lambda x: x * np.sin(x)
#ydata = np.array([1,3,5,6,8])
#ydata = model(xdata)
xdata = np.array([1,3,5,6,8])
ydata = model(xdata)
#gp = GaussianProcess(corr='cubic',theta0=1e-2,thetaL=1e-4,thetaU=1e-6,random_start=100)
gp.fit(xdata[:,np.newaxis],ydata)
gp = GaussianProcess(corr='cubic',theta0=1e-2,thetaL=1e-4,thetaU=1e-4,random_start=100)# must thetaU = thetaL
gp.fit(xdata[:,np.newaxis],ydata)
#[Out]# GaussianProcess(beta0=None, corr=<function cubic at 0x0000016F5479C620>,
#[Out]#         normalize=True, nugget=array(2.22045e-15), optimizer='fmin_cobyla',
#[Out]#         random_start=100,
#[Out]#         random_state=<mtrand.RandomState object at 0x0000016F4261AA20>,
#[Out]#         regr=<function constant at 0x0000016F5479AE18>,
#[Out]#         storage_mode='full', theta0=array([[0.01]]),
#[Out]#         thetaL=array([[0.0001]]), thetaU=array([[0.0001]]), verbose=False)
xfit = np.linspace(0,10,1000)
yfit,MSE = gp.predict(xfit[:,np.newaxis],eval_MSE=True)
#np.newaxis
#array([1,2,3,4])
#array([1],[2],[3],[4])
dyfit = 2 * np.sqrt(MSE) #
plt.plot(xdata,ydata,'or')
#[Out]# [<matplotlib.lines.Line2D at 0x16f530a54e0>]
plt.plot(xfit,yfit,'-',color='gray')
#[Out]# [<matplotlib.lines.Line2D at 0x16f536e9ba8>]
plt.fill_between(xfit,yfit-dyfit,yfit+dyfit,color='gray',alpha=0.2)#fill_between?填充两个函数之间的区域，使用fill_between函数
#[Out]# <matplotlib.collections.PolyCollection at 0x16f53384f98>
plt.xlim(0,10)
#[Out]# (0, 10)
get_ipython().run_line_magic('logstop', '')
'''