# IPython log file

get_ipython().run_line_magic('cd', 'c')
get_ipython().run_line_magic('ls', '')
logstrart -o myself_5_6_1.py
import numpy as np
rng = np.random.RandomState(1)
x = 10 * rng.rand(50)
y = 2*x -5 +rng.randn(50)
get_ipython().run_line_magic('pylab', '')
plt.scatter(x,y)
#[Out]# <matplotlib.collections.PathCollection at 0x1f8e2f0a518>
from sklearn.linear_model import LinearRegression
model = LinearRegression(fit_intercept=True)
model.fit(x,y)
type(x)
#[Out]# numpy.ndarray
x.shape
#[Out]# (50,)
x
#[Out]# array([4.17022005e+00, 7.20324493e+00, 1.14374817e-03, 3.02332573e+00,
#[Out]#        1.46755891e+00, 9.23385948e-01, 1.86260211e+00, 3.45560727e+00,
#[Out]#        3.96767474e+00, 5.38816734e+00, 4.19194514e+00, 6.85219500e+00,
#[Out]#        2.04452250e+00, 8.78117436e+00, 2.73875932e-01, 6.70467510e+00,
#[Out]#        4.17304802e+00, 5.58689828e+00, 1.40386939e+00, 1.98101489e+00,
#[Out]#        8.00744569e+00, 9.68261576e+00, 3.13424178e+00, 6.92322616e+00,
#[Out]#        8.76389152e+00, 8.94606664e+00, 8.50442114e-01, 3.90547832e-01,
#[Out]#        1.69830420e+00, 8.78142503e+00, 9.83468338e-01, 4.21107625e+00,
#[Out]#        9.57889530e+00, 5.33165285e+00, 6.91877114e+00, 3.15515631e+00,
#[Out]#        6.86500928e+00, 8.34625672e+00, 1.82882773e-01, 7.50144315e+00,
#[Out]#        9.88861089e+00, 7.48165654e+00, 2.80443992e+00, 7.89279328e+00,
#[Out]#        1.03226007e+00, 4.47893526e+00, 9.08595503e+00, 2.93614148e+00,
#[Out]#        2.87775339e+00, 1.30028572e+00])
y
#[Out]# array([ 2.65326739,  8.56128423, -5.66895863,  1.03398685, -3.18219253,
#[Out]#        -2.91881241,  0.3850064 ,  2.6532587 ,  2.74351393,  4.88870572,
#[Out]#         2.63673199, 10.39684461, -0.86014725, 11.92535308, -4.26133265,
#[Out]#        10.50960534,  3.466255  ,  6.79099968, -1.89209091, -1.39022006,
#[Out]#         9.87237318, 14.01588879,  1.05958933,  9.4330755 , 13.36676646,
#[Out]#        13.82323535, -3.01352845, -3.33376317, -2.35778955, 13.81571822,
#[Out]#        -2.5201335 ,  3.12405966, 14.64630875,  5.58773399,  9.96917167,
#[Out]#         2.83012944, 10.91559396, 10.2960171 , -6.07834826,  9.49842044,
#[Out]#        14.93725885, 10.83948201,  0.92451479,  8.76338535, -3.24168388,
#[Out]#         4.78584517, 13.4020048 ,  1.63429415,  0.53317863, -2.60018663])
model
#[Out]# LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)
import pandas as pd
x = pd.DataFrame(x)
y = pd.DataFrame(y)
model.fit(x,y)
#[Out]# LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)
xfit = np.linspace(0,10,1000)
xfit = pd.DataFrame(xfit)
yfit = model.predict(xfit)
plt.scatter(x,y)
#[Out]# <matplotlib.collections.PathCollection at 0x1f8eb60f7b8>
plt.plot(xfit,yfit)
#[Out]# [<matplotlib.lines.Line2D at 0x1f8ebbc80b8>]
model.coef_[0]
#[Out]# array([2.02720881])
model.intercept_
#[Out]# array([-4.99857709])
model
#[Out]# LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)
x = 10 * rng.rand(100,3)
y = 0.5 + np.dot(x,[1.5,-2,-1])
np.dot(x,[1.5,-2,1])
#[Out]# array([  0.71257044,   5.48466738,   8.38625348,   2.28914572,
#[Out]#          7.65201773,  12.93883387,  -4.9952237 , -13.40320137,
#[Out]#         12.9847836 ,   1.44657222,  -1.08258499,   4.22811497,
#[Out]#          8.86437792,   5.18006806,  -9.1373361 ,  -2.21172786,
#[Out]#         -0.07812071,   9.48464762,  -2.61327545,  12.07168491,
#[Out]#          6.60283703,   0.44455417,  -0.10948637, -11.23713611,
#[Out]#        -10.25602197,   8.34658673,   9.98088938,   2.74607409,
#[Out]#          1.68981544,   0.79825431,   4.80284821,   0.69912956,
#[Out]#         -0.53319118,  12.23311979,  -7.87180789,  -2.17256645,
#[Out]#         -2.68835921,  14.64870215,  -0.39908254,   9.84674762,
#[Out]#         11.16721206,  14.61080319,  -6.48961731,   3.67628834,
#[Out]#          0.11740769,   1.90754625, -15.76334946,  10.80088914,
#[Out]#         -1.08508858,   2.3852032 ,   6.00988216,  -4.0668215 ,
#[Out]#          1.53011012,  -3.37515546,   3.03671222,   7.50997838,
#[Out]#          1.75033334,   7.55476933,  -2.40261681,   8.32574444,
#[Out]#          2.64556137,  -5.73908258,  19.22858666,   5.05110375,
#[Out]#         -3.47130839,  -5.35193963,  -1.87694426,   2.79995658,
#[Out]#          9.24523184,  10.62495443,   6.62421707,  10.32174424,
#[Out]#         -3.47713976,  12.0254527 ,  14.57645646,   1.58404942,
#[Out]#          2.26707426,  17.34990694,   6.34409119,  -7.56892039,
#[Out]#          5.0771231 ,  -6.29084932,  -5.06571106, -10.46548751,
#[Out]#         11.82814781,  -0.98317759,   6.41515801,  14.24199506,
#[Out]#          5.99106086,  -0.19275953,  13.24548013,  -6.50109874,
#[Out]#         -7.19678159,   6.30849616,  -4.1651606 ,   6.43456314,
#[Out]#         -1.36447235,  10.81626855,  -1.20520973,  10.58677476])
(np.dot(x,[1.5,-2,1])).shape
#[Out]# (100,)
get_ipython().run_line_magic('pinfo', 'np.dot')
np.dot([1,2,3],[4,5,6])
#[Out]# 32
np.dot(np.array([[1,1,1],[2,2,2],[3,3,3]]),[4,5,6])
#[Out]# array([15, 30, 45])
np.dot(np.array([[1,1,1,1],[2,2,2,2],[3,3,3,3]]),[4,5,6])
np.dot(np.array([[1,1,1],[2,2,2],[3,3,3],[4,4,4]]),[4,5,6])
#[Out]# array([15, 30, 45, 60])
y.shape
#[Out]# (100,)
y
#[Out]# array([ -0.10743301, -12.47582334,   8.4886508 ,  -2.13507563,
#[Out]#         -2.90442184,   7.85516029, -15.71582809, -17.56268685,
#[Out]#         -3.78605349,  -0.7825323 ,  -1.47362256,  -9.53166464,
#[Out]#          7.92489233,   1.61420336, -12.54592572, -18.64830389,
#[Out]#        -11.97723508,   9.61312358, -14.23986468,  -7.20063817,
#[Out]#         -3.91612735,  -4.35383698, -12.20383651, -12.06786574,
#[Out]#        -13.62470762,  -9.64957267,  -4.22042989, -15.3933673 ,
#[Out]#        -10.1457517 ,  -9.83480946,  -2.49730607,  -9.79182887,
#[Out]#         -7.93070344,  10.2065294 ,  -7.802304  ,  -1.97294606,
#[Out]#         -4.8082961 ,  -3.6534475 , -16.79377144,  -0.5801887 ,
#[Out]#          1.86214161,   3.24117502, -12.29451337,   0.49608431,
#[Out]#         -0.46077775, -15.96448931, -22.79495575,  -5.27602702,
#[Out]#         -6.29661421, -14.28107353, -10.77970644, -12.58430023,
#[Out]#         -5.99948155, -11.48010088,  -0.43468554,  -7.94279769,
#[Out]#        -11.00406291,  -9.04318953, -13.35238716,  -6.59193377,
#[Out]#         -3.70821679,  -6.83160414,   3.4914127 ,  -5.8387845 ,
#[Out]#         -9.87474941, -11.09733639,  -6.51931013,  -6.69172684,
#[Out]#          4.78456067,  -1.20874691,  -3.19292327,  -1.61438039,
#[Out]#         -5.86805056,   2.13841622,   8.58920727,  -8.68476243,
#[Out]#        -13.76106569,   4.8238203 ,  -9.14821405, -21.7034924 ,
#[Out]#         -7.06894325, -14.71377396, -10.57067785, -20.79667509,
#[Out]#         -7.55011268,  -3.19173565,   3.70725442,   7.41113312,
#[Out]#         -7.32778198, -11.32430767,   8.79082209, -15.14060528,
#[Out]#        -10.93598488,   6.25637592, -11.28548308,  -3.88447295,
#[Out]#         -1.51093368,  -7.63471028,  -2.33468903,  -1.58896046])
get_ipython().run_line_magic('pinfo', 'np.dot')
type(x)
#[Out]# numpy.ndarray
x
#[Out]# array([[9.32595463e+00, 6.96818161e+00, 6.60001727e-01],
#[Out]#        [7.55463053e+00, 7.53876188e+00, 9.23024536e+00],
#[Out]#        [7.11524759e+00, 1.24270962e+00, 1.98801338e-01],
#[Out]#        [2.62109869e-01, 2.83064880e-01, 2.46211068e+00],
#[Out]#        [8.60027949e+00, 5.38831064e+00, 5.52821979e+00],
#[Out]#        [8.42030892e+00, 1.24173315e+00, 2.79183679e+00],
#[Out]#        [5.85759271e+00, 9.69595748e+00, 5.61030219e+00],
#[Out]#        [1.86472894e-01, 8.00632673e+00, 2.32974274e+00],
#[Out]#        [8.07105196e+00, 3.87860644e+00, 8.63541855e+00],
#[Out]#        [7.47121643e+00, 5.56240234e+00, 1.36455226e+00],
#[Out]#        [5.99176895e-01, 1.21343456e+00, 4.45518785e-01],
#[Out]#        [1.07494129e+00, 2.25709339e+00, 7.12988980e+00],
#[Out]#        [5.59716982e+00, 1.25559802e-01, 7.19742797e-01],
#[Out]#        [9.67276330e+00, 5.68100462e+00, 2.03293235e+00],
#[Out]#        [2.52325745e+00, 7.43825854e+00, 1.95429481e+00],
#[Out]#        [5.81358927e+00, 9.70019989e+00, 8.46828801e+00],
#[Out]#        [2.39847759e+00, 4.93769714e+00, 6.19955718e+00],
#[Out]#        [8.28980900e+00, 1.56791395e+00, 1.85762022e-01],
#[Out]#        [7.00221437e-01, 4.86345111e+00, 6.06329462e+00],
#[Out]#        [5.68851437e+00, 3.17362409e+00, 9.88616154e+00],
#[Out]#        [5.79745219e+00, 3.80141173e+00, 5.50948219e+00],
#[Out]#        [7.45334431e+00, 6.69232893e+00, 2.64919558e+00],
#[Out]#        [6.63348344e-01, 3.70084198e+00, 6.29717507e+00],
#[Out]#        [2.10174010e+00, 7.52755554e+00, 6.65364814e-01],
#[Out]#        [2.60315099e+00, 8.04754564e+00, 1.93434283e+00],
#[Out]#        [6.39460881e+00, 5.24670309e+00, 9.24807970e+00],
#[Out]#        [2.63296770e+00, 6.59610907e-01, 7.35065963e+00],
#[Out]#        [7.72178030e+00, 9.07815853e+00, 9.31972069e+00],
#[Out]#        [1.39515730e-01, 2.34362086e+00, 6.16778357e+00],
#[Out]#        [9.49016321e+00, 9.50176119e+00, 5.56653188e+00],
#[Out]#        [9.15606350e+00, 6.41566209e+00, 3.90007714e+00],
#[Out]#        [4.85990667e+00, 6.04310483e+00, 5.49547922e+00],
#[Out]#        [9.26181427e+00, 9.18733436e+00, 3.94875613e+00],
#[Out]#        [9.63262528e+00, 1.73955667e+00, 1.26329519e+00],
#[Out]#        [1.35079158e+00, 5.05662166e+00, 2.15248053e-01],
#[Out]#        [9.47970211e+00, 8.27115471e+00, 1.50189807e-01],
#[Out]#        [1.76196256e+00, 3.32063574e+00, 1.30996845e+00],
#[Out]#        [8.09490692e+00, 3.44736653e+00, 9.40107482e+00],
#[Out]#        [5.82014180e+00, 8.78831984e+00, 8.44734445e+00],
#[Out]#        [9.05392319e+00, 4.59880266e+00, 5.46346816e+00],
#[Out]#        [7.98603591e+00, 2.85718852e+00, 4.90253523e+00],
#[Out]#        [5.99110308e+00, 1.55332756e-01, 5.93481408e+00],
#[Out]#        [4.33676349e+00, 8.07360529e+00, 3.15244803e+00],
#[Out]#        [8.92888709e+00, 5.77857215e+00, 1.84010202e+00],
#[Out]#        [7.87929234e+00, 6.12031177e+00, 5.39092721e-01],
#[Out]#        [4.20193680e+00, 6.79068837e+00, 9.18601778e+00],
#[Out]#        [4.02024891e-03, 9.76759149e+00, 3.76580315e+00],
#[Out]#        [9.73783538e+00, 6.04716101e+00, 8.28845808e+00],
#[Out]#        [5.74711505e+00, 6.28076198e+00, 2.85576282e+00],
#[Out]#        [5.86833341e+00, 7.50021764e+00, 8.58313836e+00],
#[Out]#        [7.55082188e+00, 6.98057248e+00, 8.64479430e+00],
#[Out]#        [3.22680997e+00, 6.70788791e+00, 4.50873936e+00],
#[Out]#        [3.82102752e+00, 4.10811350e+00, 4.01479583e+00],
#[Out]#        [3.17383946e+00, 6.21919368e+00, 4.30247271e+00],
#[Out]#        [9.73802078e+00, 6.77800891e+00, 1.98569888e+00],
#[Out]#        [4.26701009e+00, 3.43346240e+00, 7.97638804e+00],
#[Out]#        [8.79998289e+00, 9.03841956e+00, 6.62719812e+00],
#[Out]#        [2.70208262e+00, 2.52366702e+00, 8.54897943e+00],
#[Out]#        [5.27714646e+00, 8.02161084e+00, 5.72488517e+00],
#[Out]#        [7.33142525e+00, 5.19011627e+00, 7.70883911e+00],
#[Out]#        [5.68857991e+00, 4.65709879e+00, 3.42688908e+00],
#[Out]#        [6.82093484e-01, 3.77924179e+00, 7.96260777e-01],
#[Out]#        [9.82817114e+00, 1.81612851e+00, 8.11858698e+00],
#[Out]#        [8.74961645e+00, 6.88413252e+00, 5.69494413e+00],
#[Out]#        [1.60971437e+00, 4.66880023e+00, 3.45172051e+00],
#[Out]#        [2.25039958e+00, 5.92511869e+00, 3.12269838e+00],
#[Out]#        [9.16305553e+00, 9.09635525e+00, 2.57118294e+00],
#[Out]#        [1.10891301e+00, 1.92962732e+00, 4.99584171e+00],
#[Out]#        [7.28585668e+00, 2.08194438e+00, 2.48033558e+00],
#[Out]#        [8.51671875e+00, 4.15848718e+00, 6.16685067e+00],
#[Out]#        [2.33666139e+00, 1.01967259e+00, 5.15857017e+00],
#[Out]#        [4.77140987e+00, 1.52671644e+00, 6.21806232e+00],
#[Out]#        [5.44010119e+00, 6.54137347e+00, 1.44545540e+00],
#[Out]#        [7.51527817e+00, 2.22049140e+00, 5.19351824e+00],
#[Out]#        [7.85296028e+00, 2.23304280e-01, 3.24362460e+00],
#[Out]#        [8.72922376e+00, 8.44709608e+00, 5.38440593e+00],
#[Out]#        [8.66608274e+00, 9.49805991e+00, 8.26406998e+00],
#[Out]#        [8.54115444e+00, 9.87434018e-01, 6.51304332e+00],
#[Out]#        [7.03516988e+00, 6.10240813e+00, 7.99615262e+00],
#[Out]#        [3.45712199e-01, 7.70238735e+00, 7.31728601e+00],
#[Out]#        [2.59698393e+00, 2.57069299e+00, 6.32303317e+00],
#[Out]#        [3.45297462e+00, 7.96588678e+00, 4.46146232e+00],
#[Out]#        [7.82749415e+00, 9.90471784e+00, 3.00248340e+00],
#[Out]#        [1.43005828e+00, 9.01308436e+00, 5.41559379e+00],
#[Out]#        [9.74740371e+00, 6.36604400e+00, 9.93913025e+00],
#[Out]#        [5.46070804e+00, 5.26425934e+00, 1.35427903e+00],
#[Out]#        [3.55705171e+00, 2.62185673e-01, 1.60395180e+00],
#[Out]#        [7.45637193e+00, 3.03996899e-01, 3.66543097e+00],
#[Out]#        [8.62346253e+00, 6.92677718e+00, 6.90942142e+00],
#[Out]#        [1.88636801e+00, 4.41904281e+00, 5.81577407e+00],
#[Out]#        [9.89751708e+00, 2.03906225e+00, 2.47732902e+00],
#[Out]#        [2.62173084e+00, 7.50172413e+00, 4.56975327e+00],
#[Out]#        [5.69294384e-01, 5.08516241e+00, 2.11960165e+00],
#[Out]#        [7.98604245e+00, 2.97331382e+00, 2.76060120e-01],
#[Out]#        [5.93432449e+00, 8.43840429e+00, 3.81016124e+00],
#[Out]#        [7.49858311e+00, 5.11141478e+00, 5.40951805e+00],
#[Out]#        [9.59434321e+00, 8.03960891e+00, 3.23230666e-01],
#[Out]#        [7.09387251e+00, 4.65001482e+00, 9.47548941e+00],
#[Out]#        [2.21432734e+00, 2.67072020e+00, 8.14739649e-01],
#[Out]#        [4.28618829e+00, 1.09018764e+00, 6.33786761e+00]])
x = pd.DataFrame(x)
y
#[Out]# array([ -0.10743301, -12.47582334,   8.4886508 ,  -2.13507563,
#[Out]#         -2.90442184,   7.85516029, -15.71582809, -17.56268685,
#[Out]#         -3.78605349,  -0.7825323 ,  -1.47362256,  -9.53166464,
#[Out]#          7.92489233,   1.61420336, -12.54592572, -18.64830389,
#[Out]#        -11.97723508,   9.61312358, -14.23986468,  -7.20063817,
#[Out]#         -3.91612735,  -4.35383698, -12.20383651, -12.06786574,
#[Out]#        -13.62470762,  -9.64957267,  -4.22042989, -15.3933673 ,
#[Out]#        -10.1457517 ,  -9.83480946,  -2.49730607,  -9.79182887,
#[Out]#         -7.93070344,  10.2065294 ,  -7.802304  ,  -1.97294606,
#[Out]#         -4.8082961 ,  -3.6534475 , -16.79377144,  -0.5801887 ,
#[Out]#          1.86214161,   3.24117502, -12.29451337,   0.49608431,
#[Out]#         -0.46077775, -15.96448931, -22.79495575,  -5.27602702,
#[Out]#         -6.29661421, -14.28107353, -10.77970644, -12.58430023,
#[Out]#         -5.99948155, -11.48010088,  -0.43468554,  -7.94279769,
#[Out]#        -11.00406291,  -9.04318953, -13.35238716,  -6.59193377,
#[Out]#         -3.70821679,  -6.83160414,   3.4914127 ,  -5.8387845 ,
#[Out]#         -9.87474941, -11.09733639,  -6.51931013,  -6.69172684,
#[Out]#          4.78456067,  -1.20874691,  -3.19292327,  -1.61438039,
#[Out]#         -5.86805056,   2.13841622,   8.58920727,  -8.68476243,
#[Out]#        -13.76106569,   4.8238203 ,  -9.14821405, -21.7034924 ,
#[Out]#         -7.06894325, -14.71377396, -10.57067785, -20.79667509,
#[Out]#         -7.55011268,  -3.19173565,   3.70725442,   7.41113312,
#[Out]#         -7.32778198, -11.32430767,   8.79082209, -15.14060528,
#[Out]#        -10.93598488,   6.25637592, -11.28548308,  -3.88447295,
#[Out]#         -1.51093368,  -7.63471028,  -2.33468903,  -1.58896046])
y = pd.DataFrame(y）
y = pd.DataFrame(y)
x
#[Out]#            0         1         2
#[Out]# 0   9.325955  6.968182  0.660002
#[Out]# 1   7.554631  7.538762  9.230245
#[Out]# 2   7.115248  1.242710  0.198801
#[Out]# 3   0.262110  0.283065  2.462111
#[Out]# 4   8.600279  5.388311  5.528220
#[Out]# 5   8.420309  1.241733  2.791837
#[Out]# 6   5.857593  9.695957  5.610302
#[Out]# 7   0.186473  8.006327  2.329743
#[Out]# 8   8.071052  3.878606  8.635419
#[Out]# 9   7.471216  5.562402  1.364552
#[Out]# 10  0.599177  1.213435  0.445519
#[Out]# 11  1.074941  2.257093  7.129890
#[Out]# 12  5.597170  0.125560  0.719743
#[Out]# 13  9.672763  5.681005  2.032932
#[Out]# 14  2.523257  7.438259  1.954295
#[Out]# 15  5.813589  9.700200  8.468288
#[Out]# 16  2.398478  4.937697  6.199557
#[Out]# 17  8.289809  1.567914  0.185762
#[Out]# 18  0.700221  4.863451  6.063295
#[Out]# 19  5.688514  3.173624  9.886162
#[Out]# 20  5.797452  3.801412  5.509482
#[Out]# 21  7.453344  6.692329  2.649196
#[Out]# 22  0.663348  3.700842  6.297175
#[Out]# 23  2.101740  7.527556  0.665365
#[Out]# 24  2.603151  8.047546  1.934343
#[Out]# 25  6.394609  5.246703  9.248080
#[Out]# 26  2.632968  0.659611  7.350660
#[Out]# 27  7.721780  9.078159  9.319721
#[Out]# 28  0.139516  2.343621  6.167784
#[Out]# 29  9.490163  9.501761  5.566532
#[Out]# ..       ...       ...       ...
#[Out]# 70  2.336661  1.019673  5.158570
#[Out]# 71  4.771410  1.526716  6.218062
#[Out]# 72  5.440101  6.541373  1.445455
#[Out]# 73  7.515278  2.220491  5.193518
#[Out]# 74  7.852960  0.223304  3.243625
#[Out]# 75  8.729224  8.447096  5.384406
#[Out]# 76  8.666083  9.498060  8.264070
#[Out]# 77  8.541154  0.987434  6.513043
#[Out]# 78  7.035170  6.102408  7.996153
#[Out]# 79  0.345712  7.702387  7.317286
#[Out]# 80  2.596984  2.570693  6.323033
#[Out]# 81  3.452975  7.965887  4.461462
#[Out]# 82  7.827494  9.904718  3.002483
#[Out]# 83  1.430058  9.013084  5.415594
#[Out]# 84  9.747404  6.366044  9.939130
#[Out]# 85  5.460708  5.264259  1.354279
#[Out]# 86  3.557052  0.262186  1.603952
#[Out]# 87  7.456372  0.303997  3.665431
#[Out]# 88  8.623463  6.926777  6.909421
#[Out]# 89  1.886368  4.419043  5.815774
#[Out]# 90  9.897517  2.039062  2.477329
#[Out]# 91  2.621731  7.501724  4.569753
#[Out]# 92  0.569294  5.085162  2.119602
#[Out]# 93  7.986042  2.973314  0.276060
#[Out]# 94  5.934324  8.438404  3.810161
#[Out]# 95  7.498583  5.111415  5.409518
#[Out]# 96  9.594343  8.039609  0.323231
#[Out]# 97  7.093873  4.650015  9.475489
#[Out]# 98  2.214327  2.670720  0.814740
#[Out]# 99  4.286188  1.090188  6.337868
#[Out]# 
#[Out]# [100 rows x 3 columns]
y
#[Out]#             0
#[Out]# 0   -0.107433
#[Out]# 1  -12.475823
#[Out]# 2    8.488651
#[Out]# 3   -2.135076
#[Out]# 4   -2.904422
#[Out]# 5    7.855160
#[Out]# 6  -15.715828
#[Out]# 7  -17.562687
#[Out]# 8   -3.786053
#[Out]# 9   -0.782532
#[Out]# 10  -1.473623
#[Out]# 11  -9.531665
#[Out]# 12   7.924892
#[Out]# 13   1.614203
#[Out]# 14 -12.545926
#[Out]# 15 -18.648304
#[Out]# 16 -11.977235
#[Out]# 17   9.613124
#[Out]# 18 -14.239865
#[Out]# 19  -7.200638
#[Out]# 20  -3.916127
#[Out]# 21  -4.353837
#[Out]# 22 -12.203837
#[Out]# 23 -12.067866
#[Out]# 24 -13.624708
#[Out]# 25  -9.649573
#[Out]# 26  -4.220430
#[Out]# 27 -15.393367
#[Out]# 28 -10.145752
#[Out]# 29  -9.834809
#[Out]# ..        ...
#[Out]# 70  -3.192923
#[Out]# 71  -1.614380
#[Out]# 72  -5.868051
#[Out]# 73   2.138416
#[Out]# 74   8.589207
#[Out]# 75  -8.684762
#[Out]# 76 -13.761066
#[Out]# 77   4.823820
#[Out]# 78  -9.148214
#[Out]# 79 -21.703492
#[Out]# 80  -7.068943
#[Out]# 81 -14.713774
#[Out]# 82 -10.570678
#[Out]# 83 -20.796675
#[Out]# 84  -7.550113
#[Out]# 85  -3.191736
#[Out]# 86   3.707254
#[Out]# 87   7.411133
#[Out]# 88  -7.327782
#[Out]# 89 -11.324308
#[Out]# 90   8.790822
#[Out]# 91 -15.140605
#[Out]# 92 -10.935985
#[Out]# 93   6.256376
#[Out]# 94 -11.285483
#[Out]# 95  -3.884473
#[Out]# 96  -1.510934
#[Out]# 97  -7.634710
#[Out]# 98  -2.334689
#[Out]# 99  -1.588960
#[Out]# 
#[Out]# [100 rows x 1 columns]
model.fit(x,y)
#[Out]# LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)
y
#[Out]#             0
#[Out]# 0   -0.107433
#[Out]# 1  -12.475823
#[Out]# 2    8.488651
#[Out]# 3   -2.135076
#[Out]# 4   -2.904422
#[Out]# 5    7.855160
#[Out]# 6  -15.715828
#[Out]# 7  -17.562687
#[Out]# 8   -3.786053
#[Out]# 9   -0.782532
#[Out]# 10  -1.473623
#[Out]# 11  -9.531665
#[Out]# 12   7.924892
#[Out]# 13   1.614203
#[Out]# 14 -12.545926
#[Out]# 15 -18.648304
#[Out]# 16 -11.977235
#[Out]# 17   9.613124
#[Out]# 18 -14.239865
#[Out]# 19  -7.200638
#[Out]# 20  -3.916127
#[Out]# 21  -4.353837
#[Out]# 22 -12.203837
#[Out]# 23 -12.067866
#[Out]# 24 -13.624708
#[Out]# 25  -9.649573
#[Out]# 26  -4.220430
#[Out]# 27 -15.393367
#[Out]# 28 -10.145752
#[Out]# 29  -9.834809
#[Out]# ..        ...
#[Out]# 70  -3.192923
#[Out]# 71  -1.614380
#[Out]# 72  -5.868051
#[Out]# 73   2.138416
#[Out]# 74   8.589207
#[Out]# 75  -8.684762
#[Out]# 76 -13.761066
#[Out]# 77   4.823820
#[Out]# 78  -9.148214
#[Out]# 79 -21.703492
#[Out]# 80  -7.068943
#[Out]# 81 -14.713774
#[Out]# 82 -10.570678
#[Out]# 83 -20.796675
#[Out]# 84  -7.550113
#[Out]# 85  -3.191736
#[Out]# 86   3.707254
#[Out]# 87   7.411133
#[Out]# 88  -7.327782
#[Out]# 89 -11.324308
#[Out]# 90   8.790822
#[Out]# 91 -15.140605
#[Out]# 92 -10.935985
#[Out]# 93   6.256376
#[Out]# 94 -11.285483
#[Out]# 95  -3.884473
#[Out]# 96  -1.510934
#[Out]# 97  -7.634710
#[Out]# 98  -2.334689
#[Out]# 99  -1.588960
#[Out]# 
#[Out]# [100 rows x 1 columns]
print(model.intercept_)
print(model.coef_)
y
#[Out]#             0
#[Out]# 0   -0.107433
#[Out]# 1  -12.475823
#[Out]# 2    8.488651
#[Out]# 3   -2.135076
#[Out]# 4   -2.904422
#[Out]# 5    7.855160
#[Out]# 6  -15.715828
#[Out]# 7  -17.562687
#[Out]# 8   -3.786053
#[Out]# 9   -0.782532
#[Out]# 10  -1.473623
#[Out]# 11  -9.531665
#[Out]# 12   7.924892
#[Out]# 13   1.614203
#[Out]# 14 -12.545926
#[Out]# 15 -18.648304
#[Out]# 16 -11.977235
#[Out]# 17   9.613124
#[Out]# 18 -14.239865
#[Out]# 19  -7.200638
#[Out]# 20  -3.916127
#[Out]# 21  -4.353837
#[Out]# 22 -12.203837
#[Out]# 23 -12.067866
#[Out]# 24 -13.624708
#[Out]# 25  -9.649573
#[Out]# 26  -4.220430
#[Out]# 27 -15.393367
#[Out]# 28 -10.145752
#[Out]# 29  -9.834809
#[Out]# ..        ...
#[Out]# 70  -3.192923
#[Out]# 71  -1.614380
#[Out]# 72  -5.868051
#[Out]# 73   2.138416
#[Out]# 74   8.589207
#[Out]# 75  -8.684762
#[Out]# 76 -13.761066
#[Out]# 77   4.823820
#[Out]# 78  -9.148214
#[Out]# 79 -21.703492
#[Out]# 80  -7.068943
#[Out]# 81 -14.713774
#[Out]# 82 -10.570678
#[Out]# 83 -20.796675
#[Out]# 84  -7.550113
#[Out]# 85  -3.191736
#[Out]# 86   3.707254
#[Out]# 87   7.411133
#[Out]# 88  -7.327782
#[Out]# 89 -11.324308
#[Out]# 90   8.790822
#[Out]# 91 -15.140605
#[Out]# 92 -10.935985
#[Out]# 93   6.256376
#[Out]# 94 -11.285483
#[Out]# 95  -3.884473
#[Out]# 96  -1.510934
#[Out]# 97  -7.634710
#[Out]# 98  -2.334689
#[Out]# 99  -1.588960
#[Out]# 
#[Out]# [100 rows x 1 columns]
x.sub([1.5,-2,1])
#[Out]#            0          1         2
#[Out]# 0   7.825955   8.968182 -0.339998
#[Out]# 1   6.054631   9.538762  8.230245
#[Out]# 2   5.615248   3.242710 -0.801199
#[Out]# 3  -1.237890   2.283065  1.462111
#[Out]# 4   7.100279   7.388311  4.528220
#[Out]# 5   6.920309   3.241733  1.791837
#[Out]# 6   4.357593  11.695957  4.610302
#[Out]# 7  -1.313527  10.006327  1.329743
#[Out]# 8   6.571052   5.878606  7.635419
#[Out]# 9   5.971216   7.562402  0.364552
#[Out]# 10 -0.900823   3.213435 -0.554481
#[Out]# 11 -0.425059   4.257093  6.129890
#[Out]# 12  4.097170   2.125560 -0.280257
#[Out]# 13  8.172763   7.681005  1.032932
#[Out]# 14  1.023257   9.438259  0.954295
#[Out]# 15  4.313589  11.700200  7.468288
#[Out]# 16  0.898478   6.937697  5.199557
#[Out]# 17  6.789809   3.567914 -0.814238
#[Out]# 18 -0.799779   6.863451  5.063295
#[Out]# 19  4.188514   5.173624  8.886162
#[Out]# 20  4.297452   5.801412  4.509482
#[Out]# 21  5.953344   8.692329  1.649196
#[Out]# 22 -0.836652   5.700842  5.297175
#[Out]# 23  0.601740   9.527556 -0.334635
#[Out]# 24  1.103151  10.047546  0.934343
#[Out]# 25  4.894609   7.246703  8.248080
#[Out]# 26  1.132968   2.659611  6.350660
#[Out]# 27  6.221780  11.078159  8.319721
#[Out]# 28 -1.360484   4.343621  5.167784
#[Out]# 29  7.990163  11.501761  4.566532
#[Out]# ..       ...        ...       ...
#[Out]# 70  0.836661   3.019673  4.158570
#[Out]# 71  3.271410   3.526716  5.218062
#[Out]# 72  3.940101   8.541373  0.445455
#[Out]# 73  6.015278   4.220491  4.193518
#[Out]# 74  6.352960   2.223304  2.243625
#[Out]# 75  7.229224  10.447096  4.384406
#[Out]# 76  7.166083  11.498060  7.264070
#[Out]# 77  7.041154   2.987434  5.513043
#[Out]# 78  5.535170   8.102408  6.996153
#[Out]# 79 -1.154288   9.702387  6.317286
#[Out]# 80  1.096984   4.570693  5.323033
#[Out]# 81  1.952975   9.965887  3.461462
#[Out]# 82  6.327494  11.904718  2.002483
#[Out]# 83 -0.069942  11.013084  4.415594
#[Out]# 84  8.247404   8.366044  8.939130
#[Out]# 85  3.960708   7.264259  0.354279
#[Out]# 86  2.057052   2.262186  0.603952
#[Out]# 87  5.956372   2.303997  2.665431
#[Out]# 88  7.123463   8.926777  5.909421
#[Out]# 89  0.386368   6.419043  4.815774
#[Out]# 90  8.397517   4.039062  1.477329
#[Out]# 91  1.121731   9.501724  3.569753
#[Out]# 92 -0.930706   7.085162  1.119602
#[Out]# 93  6.486042   4.973314 -0.723940
#[Out]# 94  4.434324  10.438404  2.810161
#[Out]# 95  5.998583   7.111415  4.409518
#[Out]# 96  8.094343  10.039609 -0.676769
#[Out]# 97  5.593873   6.650015  8.475489
#[Out]# 98  0.714327   4.670720 -0.185260
#[Out]# 99  2.786188   3.090188  5.337868
#[Out]# 
#[Out]# [100 rows x 3 columns]
y.shape
#[Out]# (100, 1)
x.shape
#[Out]# (100, 3)
x1 = np.array([[1,1],[2,2],[3,3]])
y1 = np.array([4,4])
np.dot(x1,y1)
#[Out]# array([ 8, 16, 24])
x1 = pd.DataFrame(x1)
y1 = pd.DataFrame(y1)
x1.sub(y1)
#[Out]#      0   1
#[Out]# 0 -3.0 NaN
#[Out]# 1 -2.0 NaN
#[Out]# 2  NaN NaN
x1.sub(y1,axis=0)
#[Out]#      0   1
#[Out]# 0 -3.0 NaN
#[Out]# 1 -2.0 NaN
#[Out]# 2  NaN NaN
x1.sub(y1,axis=1)
#[Out]#      0   1
#[Out]# 0 -3.0 NaN
#[Out]# 1 -2.0 NaN
#[Out]# 2  NaN NaN
x1
#[Out]#    0  1
#[Out]# 0  1  1
#[Out]# 1  2  2
#[Out]# 2  3  3
y1
#[Out]#    0
#[Out]# 0  4
#[Out]# 1  4
x1.mul(y1,axis=1)
#[Out]#      0   1
#[Out]# 0  4.0 NaN
#[Out]# 1  8.0 NaN
#[Out]# 2  NaN NaN
x1.mul(y1,axis=0)
#[Out]#      0   1
#[Out]# 0  4.0 NaN
#[Out]# 1  8.0 NaN
#[Out]# 2  NaN NaN
from sklearn.preprocessing import PolynomialFeatures
x = np.array([2,3,4])
poly = PolynomialFeatures(3,include_bias=False)
poly.fit_transform(x[:,np.newaxis])
#[Out]# array([[ 2.,  4.,  8.],
#[Out]#        [ 3.,  9., 27.],
#[Out]#        [ 4., 16., 64.]])
x[:,np.newaxis]
#[Out]# array([[2],
#[Out]#        [3],
#[Out]#        [4]])
from sklearn.pipeline import make_pipeline
poly_model = make_pipeline(PolynomialFeatures(7),LinearRegression())
plt.scatter(x,y)
x
#[Out]# array([2, 3, 4])
rng = np.random.RandomState(1)
x = 10 * rng.rand(50)
y = np.sin(x) + 0.1 * rng.randn(50)
poly_model.fit(x[:,None],y)
#[Out]# Pipeline(memory=None,
#[Out]#      steps=[('polynomialfeatures', PolynomialFeatures(degree=7, include_bias=True, interaction_only=False)), ('linearregression', LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False))])
yfit = poly_model.predict(xfit[:,None])
yfit = poly_model.predict(xfit[:,np.newaxis])
x = 10 * rng.rand(50)
y = np.sin(x) + 0.1 * rng.randn(50)
poly_model.fit(x[:,None],y)
#[Out]# Pipeline(memory=None,
#[Out]#      steps=[('polynomialfeatures', PolynomialFeatures(degree=7, include_bias=True, interaction_only=False)), ('linearregression', LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False))])
yfit = poly_model.predict(xfit[:,np.newaxis])
poly_model.fit(x[:,None],y)
#[Out]# Pipeline(memory=None,
#[Out]#      steps=[('polynomialfeatures', PolynomialFeatures(degree=7, include_bias=True, interaction_only=False)), ('linearregression', LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False))])
yfit = poly_model.predict(xfit[:,np.newaxis])
xfig
xfit
#[Out]#             0
#[Out]# 0     0.00000
#[Out]# 1     0.01001
#[Out]# 2     0.02002
#[Out]# 3     0.03003
#[Out]# 4     0.04004
#[Out]# 5     0.05005
#[Out]# 6     0.06006
#[Out]# 7     0.07007
#[Out]# 8     0.08008
#[Out]# 9     0.09009
#[Out]# 10    0.10010
#[Out]# 11    0.11011
#[Out]# 12    0.12012
#[Out]# 13    0.13013
#[Out]# 14    0.14014
#[Out]# 15    0.15015
#[Out]# 16    0.16016
#[Out]# 17    0.17017
#[Out]# 18    0.18018
#[Out]# 19    0.19019
#[Out]# 20    0.20020
#[Out]# 21    0.21021
#[Out]# 22    0.22022
#[Out]# 23    0.23023
#[Out]# 24    0.24024
#[Out]# 25    0.25025
#[Out]# 26    0.26026
#[Out]# 27    0.27027
#[Out]# 28    0.28028
#[Out]# 29    0.29029
#[Out]# ..        ...
#[Out]# 970   9.70971
#[Out]# 971   9.71972
#[Out]# 972   9.72973
#[Out]# 973   9.73974
#[Out]# 974   9.74975
#[Out]# 975   9.75976
#[Out]# 976   9.76977
#[Out]# 977   9.77978
#[Out]# 978   9.78979
#[Out]# 979   9.79980
#[Out]# 980   9.80981
#[Out]# 981   9.81982
#[Out]# 982   9.82983
#[Out]# 983   9.83984
#[Out]# 984   9.84985
#[Out]# 985   9.85986
#[Out]# 986   9.86987
#[Out]# 987   9.87988
#[Out]# 988   9.88989
#[Out]# 989   9.89990
#[Out]# 990   9.90991
#[Out]# 991   9.91992
#[Out]# 992   9.92993
#[Out]# 993   9.93994
#[Out]# 994   9.94995
#[Out]# 995   9.95996
#[Out]# 996   9.96997
#[Out]# 997   9.97998
#[Out]# 998   9.98999
#[Out]# 999  10.00000
#[Out]# 
#[Out]# [1000 rows x 1 columns]
xfit([:,np.newaxis])
xfit[:,np.newaxis]
yfit = poly_model.predict(xfit)
plt.scatter(x,y)
#[Out]# <matplotlib.collections.PathCollection at 0x1f8eefe01d0>
plt.plot(xfit,yfit)
#[Out]# [<matplotlib.lines.Line2D at 0x1f8eef2ebe0>]
get_ipython().run_line_magic('pwd', '')
#[Out]# 'c:\\python\\python_数据科学手册\\myself_x'
get_ipython().run_line_magic('cd', '..')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
#[Out]# 'c:\\python\\python_数据科学手册'
get_ipython().run_line_magic('cd', 'myself_x/')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('cd', 'data/')
get_ipython().run_line_magic('ls', '')
from sklearn.base import BaseEstimator,TransformerMixin
class GaussianFeatures(BaseEstimator,TransformerMixin):
    def __init__(self,n,width_factor=2.0):
        self.n = n
        self.width_factor = width_factor
    @staticmethod
    def _gauss_basis(x,y,width,axis=None):
        arg = (x-y)/width
        return np.exp(-0.5 * np.sum(arg **2,axis))
    def fit(self,x,y=None):
        self.centers = np.linspace(x.min(),x.max(),self.n)
        self.width = self.width_factor * (self.centers_[1] -self.centers[0])
        return self
    def transform(self,x):
        return self._gauss_basis(x[:,:,np.newaxis],self.centers_,self.width_,axis=1)
    
        
        
        
gauss_model = make_pipeline(GaussianFeatures(20),LinearRegression())
gauss_model.fit(x[:,np.newaxis],y)
gauss_model.fit(x[:,np.newaxis],y)
class GaussianFeatures(BaseEstimator,TransformerMixin):
    def __init__(self,n,width_factor=2.0):
        self.n = n
        self.width_factor = width_factor
    @staticmethod
    def _gauss_basis(x,y,width,axis=None):
        arg = (x-y)/width
        return np.exp(-0.5 * np.sum(arg **2,axis))
    def fit(self,x,y=None):
        self.centers = np.linspace(x.min(),x.max(),self.n)
        self.width = self.width_factor * (self.centers_[1] -self.centers_[0])
        return self
    def transform(self,x):
        return self._gauss_basis(x[:,:,np.newaxis],self.centers_,self.width_,axis=1)
    
        
        
        
gauss_model.fit(x[:,np.newaxis],y)
get_ipython().run_line_magic('pinfo', 'GaussianFeatures')
get_ipython().run_line_magic('pinfo', 'GaussianFeatures.centers_')
class GaussianFeatures(BaseEstimator,TransformerMixin):
    def __init__(self,n,width_factor=2.0):
        self.n = n
        self.width_factor = width_factor
    @staticmethod
    def _gauss_basis(x,y,width,axis=None):
        arg = (x-y)/width
        return np.exp(-0.5 * np.sum(arg **2,axis))
    def fit(self,x,y=None):
        self.centers_ = np.linspace(x.min(),x.max(),self.n)
        self.width = self.width_factor * (self.centers_[1] -self.centers_[0])
        return self
    def transform(self,x):
        return self._gauss_basis(x[:,:,np.newaxis],self.centers_,self.width_,axis=1)
    
        
        
        
get_ipython().run_line_magic('pinfo', 'GaussianFeatures.centers_')
gauss_model.fit(x[:,np.newaxis],y)
class GaussianFeatures(BaseEstimator,TransformerMixin):
    def __init__(self,n,width_factor=2.0):
        self.n = n
        self.width_factor = width_factor
    @staticmethod
    def _gauss_basis(x,y,width,axis=None):
        arg = (x-y)/width
        return np.exp(-0.5 * np.sum(arg **2,axis))
    def fit(self,x,y=None):
        self.centers_ = np.linspace(x.min(),x.max(),self.n)
        self.width = self.width_factor * (self.centers_[1] -self.centers_[0])
        return self
    def transform(self,x):
        return self._gauss_basis(x[:,:,np.newaxis],self.centers_,self.width_,axis=1)
    
        
        
        
get_ipython().run_line_magic('pinfo2', 'GaussianFeatures')
get_ipython().run_line_magic('pinfo', 'GaussianFeatures.centers_')
get_ipython().run_line_magic('pinfo', 'GaussianFeatures')
get_ipython().run_line_magic('pinfo2', 'GaussianFeatures')
class GaussianFeatures(BaseEstimator,TransformerMixin):
    def __init__(self,n,width_factor=2.0):
        self.n = n
        self.width_factor = width_factor
    @staticmethod
    def _gauss_basis(x,y,width,axis=None):
        arg = (x-y)/width
        return np.exp(-0.5 * np.sum(arg **2,axis))
    def fit(self,x,y=None):
        self.centers_ = np.linspace(x.min(),x.max(),self.n)
        self.width = self.width_factor * (self.centers_[1] -self.centers_[0])
        return self
    def transform(self,x):
        return self._gauss_basis(x[:,:,np.newaxis],self.centers_,self.width_,axis=1)
    
        
        
        
gauss_model = make_pipeline(GaussianFeatures(20),LinearRegression())
gauss_model.fit(x[:,np.newaxis],y)
class GaussianFeatures(BaseEstimator,TransformerMixin):
    def __init__(self,n,width_factor=2.0):
        self.n = n
        self.width_factor = width_factor
    @staticmethod
    def _gauss_basis(x,y,width,axis=None):
        arg = (x-y)/width
        return np.exp(-0.5 * np.sum(arg **2,axis))
    def fit(self,x,y=None):
        self.centers_ = np.linspace(x.min(),x.max(),self.n)
        self.width_ = self.width_factor * (self.centers_[1] -self.centers_[0])
        return self
    def transform(self,x):
        return self._gauss_basis(x[:,:,np.newaxis],self.centers_,self.width_,axis=1)
    
        
        
        
gauss_model = make_pipeline(GaussianFeatures(20),LinearRegression())
gauss_model.fit(x[:,np.newaxis],y)
#[Out]# Pipeline(memory=None,
#[Out]#      steps=[('gaussianfeatures', GaussianFeatures(n=20, width_factor=2.0)), ('linearregression', LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False))])
yfit = gauss_model.predict(xfit[:,np.newaxis])
yfit = gauss_model.predict(xfit)
xfit
#[Out]#             0
#[Out]# 0     0.00000
#[Out]# 1     0.01001
#[Out]# 2     0.02002
#[Out]# 3     0.03003
#[Out]# 4     0.04004
#[Out]# 5     0.05005
#[Out]# 6     0.06006
#[Out]# 7     0.07007
#[Out]# 8     0.08008
#[Out]# 9     0.09009
#[Out]# 10    0.10010
#[Out]# 11    0.11011
#[Out]# 12    0.12012
#[Out]# 13    0.13013
#[Out]# 14    0.14014
#[Out]# 15    0.15015
#[Out]# 16    0.16016
#[Out]# 17    0.17017
#[Out]# 18    0.18018
#[Out]# 19    0.19019
#[Out]# 20    0.20020
#[Out]# 21    0.21021
#[Out]# 22    0.22022
#[Out]# 23    0.23023
#[Out]# 24    0.24024
#[Out]# 25    0.25025
#[Out]# 26    0.26026
#[Out]# 27    0.27027
#[Out]# 28    0.28028
#[Out]# 29    0.29029
#[Out]# ..        ...
#[Out]# 970   9.70971
#[Out]# 971   9.71972
#[Out]# 972   9.72973
#[Out]# 973   9.73974
#[Out]# 974   9.74975
#[Out]# 975   9.75976
#[Out]# 976   9.76977
#[Out]# 977   9.77978
#[Out]# 978   9.78979
#[Out]# 979   9.79980
#[Out]# 980   9.80981
#[Out]# 981   9.81982
#[Out]# 982   9.82983
#[Out]# 983   9.83984
#[Out]# 984   9.84985
#[Out]# 985   9.85986
#[Out]# 986   9.86987
#[Out]# 987   9.87988
#[Out]# 988   9.88989
#[Out]# 989   9.89990
#[Out]# 990   9.90991
#[Out]# 991   9.91992
#[Out]# 992   9.92993
#[Out]# 993   9.93994
#[Out]# 994   9.94995
#[Out]# 995   9.95996
#[Out]# 996   9.96997
#[Out]# 997   9.97998
#[Out]# 998   9.98999
#[Out]# 999  10.00000
#[Out]# 
#[Out]# [1000 rows x 1 columns]
xfit = pd.DataFrame(xfig)
xfit = pd.DataFrame(xfit)
yfit = gauss_model.predict(xfit)
type(xfit)
#[Out]# pandas.core.frame.DataFrame
xfit = np.linspace(0,10,1000)
yfit = gauss_model.predict(xfit)
yfit = gauss_model.predict(xfit[:,np.newaxis])
xfit
#[Out]# array([ 0.        ,  0.01001001,  0.02002002,  0.03003003,  0.04004004,
#[Out]#         0.05005005,  0.06006006,  0.07007007,  0.08008008,  0.09009009,
#[Out]#         0.1001001 ,  0.11011011,  0.12012012,  0.13013013,  0.14014014,
#[Out]#         0.15015015,  0.16016016,  0.17017017,  0.18018018,  0.19019019,
#[Out]#         0.2002002 ,  0.21021021,  0.22022022,  0.23023023,  0.24024024,
#[Out]#         0.25025025,  0.26026026,  0.27027027,  0.28028028,  0.29029029,
#[Out]#         0.3003003 ,  0.31031031,  0.32032032,  0.33033033,  0.34034034,
#[Out]#         0.35035035,  0.36036036,  0.37037037,  0.38038038,  0.39039039,
#[Out]#         0.4004004 ,  0.41041041,  0.42042042,  0.43043043,  0.44044044,
#[Out]#         0.45045045,  0.46046046,  0.47047047,  0.48048048,  0.49049049,
#[Out]#         0.5005005 ,  0.51051051,  0.52052052,  0.53053053,  0.54054054,
#[Out]#         0.55055055,  0.56056056,  0.57057057,  0.58058058,  0.59059059,
#[Out]#         0.6006006 ,  0.61061061,  0.62062062,  0.63063063,  0.64064064,
#[Out]#         0.65065065,  0.66066066,  0.67067067,  0.68068068,  0.69069069,
#[Out]#         0.7007007 ,  0.71071071,  0.72072072,  0.73073073,  0.74074074,
#[Out]#         0.75075075,  0.76076076,  0.77077077,  0.78078078,  0.79079079,
#[Out]#         0.8008008 ,  0.81081081,  0.82082082,  0.83083083,  0.84084084,
#[Out]#         0.85085085,  0.86086086,  0.87087087,  0.88088088,  0.89089089,
#[Out]#         0.9009009 ,  0.91091091,  0.92092092,  0.93093093,  0.94094094,
#[Out]#         0.95095095,  0.96096096,  0.97097097,  0.98098098,  0.99099099,
#[Out]#         1.001001  ,  1.01101101,  1.02102102,  1.03103103,  1.04104104,
#[Out]#         1.05105105,  1.06106106,  1.07107107,  1.08108108,  1.09109109,
#[Out]#         1.1011011 ,  1.11111111,  1.12112112,  1.13113113,  1.14114114,
#[Out]#         1.15115115,  1.16116116,  1.17117117,  1.18118118,  1.19119119,
#[Out]#         1.2012012 ,  1.21121121,  1.22122122,  1.23123123,  1.24124124,
#[Out]#         1.25125125,  1.26126126,  1.27127127,  1.28128128,  1.29129129,
#[Out]#         1.3013013 ,  1.31131131,  1.32132132,  1.33133133,  1.34134134,
#[Out]#         1.35135135,  1.36136136,  1.37137137,  1.38138138,  1.39139139,
#[Out]#         1.4014014 ,  1.41141141,  1.42142142,  1.43143143,  1.44144144,
#[Out]#         1.45145145,  1.46146146,  1.47147147,  1.48148148,  1.49149149,
#[Out]#         1.5015015 ,  1.51151151,  1.52152152,  1.53153153,  1.54154154,
#[Out]#         1.55155155,  1.56156156,  1.57157157,  1.58158158,  1.59159159,
#[Out]#         1.6016016 ,  1.61161161,  1.62162162,  1.63163163,  1.64164164,
#[Out]#         1.65165165,  1.66166166,  1.67167167,  1.68168168,  1.69169169,
#[Out]#         1.7017017 ,  1.71171171,  1.72172172,  1.73173173,  1.74174174,
#[Out]#         1.75175175,  1.76176176,  1.77177177,  1.78178178,  1.79179179,
#[Out]#         1.8018018 ,  1.81181181,  1.82182182,  1.83183183,  1.84184184,
#[Out]#         1.85185185,  1.86186186,  1.87187187,  1.88188188,  1.89189189,
#[Out]#         1.9019019 ,  1.91191191,  1.92192192,  1.93193193,  1.94194194,
#[Out]#         1.95195195,  1.96196196,  1.97197197,  1.98198198,  1.99199199,
#[Out]#         2.002002  ,  2.01201201,  2.02202202,  2.03203203,  2.04204204,
#[Out]#         2.05205205,  2.06206206,  2.07207207,  2.08208208,  2.09209209,
#[Out]#         2.1021021 ,  2.11211211,  2.12212212,  2.13213213,  2.14214214,
#[Out]#         2.15215215,  2.16216216,  2.17217217,  2.18218218,  2.19219219,
#[Out]#         2.2022022 ,  2.21221221,  2.22222222,  2.23223223,  2.24224224,
#[Out]#         2.25225225,  2.26226226,  2.27227227,  2.28228228,  2.29229229,
#[Out]#         2.3023023 ,  2.31231231,  2.32232232,  2.33233233,  2.34234234,
#[Out]#         2.35235235,  2.36236236,  2.37237237,  2.38238238,  2.39239239,
#[Out]#         2.4024024 ,  2.41241241,  2.42242242,  2.43243243,  2.44244244,
#[Out]#         2.45245245,  2.46246246,  2.47247247,  2.48248248,  2.49249249,
#[Out]#         2.5025025 ,  2.51251251,  2.52252252,  2.53253253,  2.54254254,
#[Out]#         2.55255255,  2.56256256,  2.57257257,  2.58258258,  2.59259259,
#[Out]#         2.6026026 ,  2.61261261,  2.62262262,  2.63263263,  2.64264264,
#[Out]#         2.65265265,  2.66266266,  2.67267267,  2.68268268,  2.69269269,
#[Out]#         2.7027027 ,  2.71271271,  2.72272272,  2.73273273,  2.74274274,
#[Out]#         2.75275275,  2.76276276,  2.77277277,  2.78278278,  2.79279279,
#[Out]#         2.8028028 ,  2.81281281,  2.82282282,  2.83283283,  2.84284284,
#[Out]#         2.85285285,  2.86286286,  2.87287287,  2.88288288,  2.89289289,
#[Out]#         2.9029029 ,  2.91291291,  2.92292292,  2.93293293,  2.94294294,
#[Out]#         2.95295295,  2.96296296,  2.97297297,  2.98298298,  2.99299299,
#[Out]#         3.003003  ,  3.01301301,  3.02302302,  3.03303303,  3.04304304,
#[Out]#         3.05305305,  3.06306306,  3.07307307,  3.08308308,  3.09309309,
#[Out]#         3.1031031 ,  3.11311311,  3.12312312,  3.13313313,  3.14314314,
#[Out]#         3.15315315,  3.16316316,  3.17317317,  3.18318318,  3.19319319,
#[Out]#         3.2032032 ,  3.21321321,  3.22322322,  3.23323323,  3.24324324,
#[Out]#         3.25325325,  3.26326326,  3.27327327,  3.28328328,  3.29329329,
#[Out]#         3.3033033 ,  3.31331331,  3.32332332,  3.33333333,  3.34334334,
#[Out]#         3.35335335,  3.36336336,  3.37337337,  3.38338338,  3.39339339,
#[Out]#         3.4034034 ,  3.41341341,  3.42342342,  3.43343343,  3.44344344,
#[Out]#         3.45345345,  3.46346346,  3.47347347,  3.48348348,  3.49349349,
#[Out]#         3.5035035 ,  3.51351351,  3.52352352,  3.53353353,  3.54354354,
#[Out]#         3.55355355,  3.56356356,  3.57357357,  3.58358358,  3.59359359,
#[Out]#         3.6036036 ,  3.61361361,  3.62362362,  3.63363363,  3.64364364,
#[Out]#         3.65365365,  3.66366366,  3.67367367,  3.68368368,  3.69369369,
#[Out]#         3.7037037 ,  3.71371371,  3.72372372,  3.73373373,  3.74374374,
#[Out]#         3.75375375,  3.76376376,  3.77377377,  3.78378378,  3.79379379,
#[Out]#         3.8038038 ,  3.81381381,  3.82382382,  3.83383383,  3.84384384,
#[Out]#         3.85385385,  3.86386386,  3.87387387,  3.88388388,  3.89389389,
#[Out]#         3.9039039 ,  3.91391391,  3.92392392,  3.93393393,  3.94394394,
#[Out]#         3.95395395,  3.96396396,  3.97397397,  3.98398398,  3.99399399,
#[Out]#         4.004004  ,  4.01401401,  4.02402402,  4.03403403,  4.04404404,
#[Out]#         4.05405405,  4.06406406,  4.07407407,  4.08408408,  4.09409409,
#[Out]#         4.1041041 ,  4.11411411,  4.12412412,  4.13413413,  4.14414414,
#[Out]#         4.15415415,  4.16416416,  4.17417417,  4.18418418,  4.19419419,
#[Out]#         4.2042042 ,  4.21421421,  4.22422422,  4.23423423,  4.24424424,
#[Out]#         4.25425425,  4.26426426,  4.27427427,  4.28428428,  4.29429429,
#[Out]#         4.3043043 ,  4.31431431,  4.32432432,  4.33433433,  4.34434434,
#[Out]#         4.35435435,  4.36436436,  4.37437437,  4.38438438,  4.39439439,
#[Out]#         4.4044044 ,  4.41441441,  4.42442442,  4.43443443,  4.44444444,
#[Out]#         4.45445445,  4.46446446,  4.47447447,  4.48448448,  4.49449449,
#[Out]#         4.5045045 ,  4.51451451,  4.52452452,  4.53453453,  4.54454454,
#[Out]#         4.55455455,  4.56456456,  4.57457457,  4.58458458,  4.59459459,
#[Out]#         4.6046046 ,  4.61461461,  4.62462462,  4.63463463,  4.64464464,
#[Out]#         4.65465465,  4.66466466,  4.67467467,  4.68468468,  4.69469469,
#[Out]#         4.7047047 ,  4.71471471,  4.72472472,  4.73473473,  4.74474474,
#[Out]#         4.75475475,  4.76476476,  4.77477477,  4.78478478,  4.79479479,
#[Out]#         4.8048048 ,  4.81481481,  4.82482482,  4.83483483,  4.84484484,
#[Out]#         4.85485485,  4.86486486,  4.87487487,  4.88488488,  4.89489489,
#[Out]#         4.9049049 ,  4.91491491,  4.92492492,  4.93493493,  4.94494494,
#[Out]#         4.95495495,  4.96496496,  4.97497497,  4.98498498,  4.99499499,
#[Out]#         5.00500501,  5.01501502,  5.02502503,  5.03503504,  5.04504505,
#[Out]#         5.05505506,  5.06506507,  5.07507508,  5.08508509,  5.0950951 ,
#[Out]#         5.10510511,  5.11511512,  5.12512513,  5.13513514,  5.14514515,
#[Out]#         5.15515516,  5.16516517,  5.17517518,  5.18518519,  5.1951952 ,
#[Out]#         5.20520521,  5.21521522,  5.22522523,  5.23523524,  5.24524525,
#[Out]#         5.25525526,  5.26526527,  5.27527528,  5.28528529,  5.2952953 ,
#[Out]#         5.30530531,  5.31531532,  5.32532533,  5.33533534,  5.34534535,
#[Out]#         5.35535536,  5.36536537,  5.37537538,  5.38538539,  5.3953954 ,
#[Out]#         5.40540541,  5.41541542,  5.42542543,  5.43543544,  5.44544545,
#[Out]#         5.45545546,  5.46546547,  5.47547548,  5.48548549,  5.4954955 ,
#[Out]#         5.50550551,  5.51551552,  5.52552553,  5.53553554,  5.54554555,
#[Out]#         5.55555556,  5.56556557,  5.57557558,  5.58558559,  5.5955956 ,
#[Out]#         5.60560561,  5.61561562,  5.62562563,  5.63563564,  5.64564565,
#[Out]#         5.65565566,  5.66566567,  5.67567568,  5.68568569,  5.6956957 ,
#[Out]#         5.70570571,  5.71571572,  5.72572573,  5.73573574,  5.74574575,
#[Out]#         5.75575576,  5.76576577,  5.77577578,  5.78578579,  5.7957958 ,
#[Out]#         5.80580581,  5.81581582,  5.82582583,  5.83583584,  5.84584585,
#[Out]#         5.85585586,  5.86586587,  5.87587588,  5.88588589,  5.8958959 ,
#[Out]#         5.90590591,  5.91591592,  5.92592593,  5.93593594,  5.94594595,
#[Out]#         5.95595596,  5.96596597,  5.97597598,  5.98598599,  5.995996  ,
#[Out]#         6.00600601,  6.01601602,  6.02602603,  6.03603604,  6.04604605,
#[Out]#         6.05605606,  6.06606607,  6.07607608,  6.08608609,  6.0960961 ,
#[Out]#         6.10610611,  6.11611612,  6.12612613,  6.13613614,  6.14614615,
#[Out]#         6.15615616,  6.16616617,  6.17617618,  6.18618619,  6.1961962 ,
#[Out]#         6.20620621,  6.21621622,  6.22622623,  6.23623624,  6.24624625,
#[Out]#         6.25625626,  6.26626627,  6.27627628,  6.28628629,  6.2962963 ,
#[Out]#         6.30630631,  6.31631632,  6.32632633,  6.33633634,  6.34634635,
#[Out]#         6.35635636,  6.36636637,  6.37637638,  6.38638639,  6.3963964 ,
#[Out]#         6.40640641,  6.41641642,  6.42642643,  6.43643644,  6.44644645,
#[Out]#         6.45645646,  6.46646647,  6.47647648,  6.48648649,  6.4964965 ,
#[Out]#         6.50650651,  6.51651652,  6.52652653,  6.53653654,  6.54654655,
#[Out]#         6.55655656,  6.56656657,  6.57657658,  6.58658659,  6.5965966 ,
#[Out]#         6.60660661,  6.61661662,  6.62662663,  6.63663664,  6.64664665,
#[Out]#         6.65665666,  6.66666667,  6.67667668,  6.68668669,  6.6966967 ,
#[Out]#         6.70670671,  6.71671672,  6.72672673,  6.73673674,  6.74674675,
#[Out]#         6.75675676,  6.76676677,  6.77677678,  6.78678679,  6.7967968 ,
#[Out]#         6.80680681,  6.81681682,  6.82682683,  6.83683684,  6.84684685,
#[Out]#         6.85685686,  6.86686687,  6.87687688,  6.88688689,  6.8968969 ,
#[Out]#         6.90690691,  6.91691692,  6.92692693,  6.93693694,  6.94694695,
#[Out]#         6.95695696,  6.96696697,  6.97697698,  6.98698699,  6.996997  ,
#[Out]#         7.00700701,  7.01701702,  7.02702703,  7.03703704,  7.04704705,
#[Out]#         7.05705706,  7.06706707,  7.07707708,  7.08708709,  7.0970971 ,
#[Out]#         7.10710711,  7.11711712,  7.12712713,  7.13713714,  7.14714715,
#[Out]#         7.15715716,  7.16716717,  7.17717718,  7.18718719,  7.1971972 ,
#[Out]#         7.20720721,  7.21721722,  7.22722723,  7.23723724,  7.24724725,
#[Out]#         7.25725726,  7.26726727,  7.27727728,  7.28728729,  7.2972973 ,
#[Out]#         7.30730731,  7.31731732,  7.32732733,  7.33733734,  7.34734735,
#[Out]#         7.35735736,  7.36736737,  7.37737738,  7.38738739,  7.3973974 ,
#[Out]#         7.40740741,  7.41741742,  7.42742743,  7.43743744,  7.44744745,
#[Out]#         7.45745746,  7.46746747,  7.47747748,  7.48748749,  7.4974975 ,
#[Out]#         7.50750751,  7.51751752,  7.52752753,  7.53753754,  7.54754755,
#[Out]#         7.55755756,  7.56756757,  7.57757758,  7.58758759,  7.5975976 ,
#[Out]#         7.60760761,  7.61761762,  7.62762763,  7.63763764,  7.64764765,
#[Out]#         7.65765766,  7.66766767,  7.67767768,  7.68768769,  7.6976977 ,
#[Out]#         7.70770771,  7.71771772,  7.72772773,  7.73773774,  7.74774775,
#[Out]#         7.75775776,  7.76776777,  7.77777778,  7.78778779,  7.7977978 ,
#[Out]#         7.80780781,  7.81781782,  7.82782783,  7.83783784,  7.84784785,
#[Out]#         7.85785786,  7.86786787,  7.87787788,  7.88788789,  7.8978979 ,
#[Out]#         7.90790791,  7.91791792,  7.92792793,  7.93793794,  7.94794795,
#[Out]#         7.95795796,  7.96796797,  7.97797798,  7.98798799,  7.997998  ,
#[Out]#         8.00800801,  8.01801802,  8.02802803,  8.03803804,  8.04804805,
#[Out]#         8.05805806,  8.06806807,  8.07807808,  8.08808809,  8.0980981 ,
#[Out]#         8.10810811,  8.11811812,  8.12812813,  8.13813814,  8.14814815,
#[Out]#         8.15815816,  8.16816817,  8.17817818,  8.18818819,  8.1981982 ,
#[Out]#         8.20820821,  8.21821822,  8.22822823,  8.23823824,  8.24824825,
#[Out]#         8.25825826,  8.26826827,  8.27827828,  8.28828829,  8.2982983 ,
#[Out]#         8.30830831,  8.31831832,  8.32832833,  8.33833834,  8.34834835,
#[Out]#         8.35835836,  8.36836837,  8.37837838,  8.38838839,  8.3983984 ,
#[Out]#         8.40840841,  8.41841842,  8.42842843,  8.43843844,  8.44844845,
#[Out]#         8.45845846,  8.46846847,  8.47847848,  8.48848849,  8.4984985 ,
#[Out]#         8.50850851,  8.51851852,  8.52852853,  8.53853854,  8.54854855,
#[Out]#         8.55855856,  8.56856857,  8.57857858,  8.58858859,  8.5985986 ,
#[Out]#         8.60860861,  8.61861862,  8.62862863,  8.63863864,  8.64864865,
#[Out]#         8.65865866,  8.66866867,  8.67867868,  8.68868869,  8.6986987 ,
#[Out]#         8.70870871,  8.71871872,  8.72872873,  8.73873874,  8.74874875,
#[Out]#         8.75875876,  8.76876877,  8.77877878,  8.78878879,  8.7987988 ,
#[Out]#         8.80880881,  8.81881882,  8.82882883,  8.83883884,  8.84884885,
#[Out]#         8.85885886,  8.86886887,  8.87887888,  8.88888889,  8.8988989 ,
#[Out]#         8.90890891,  8.91891892,  8.92892893,  8.93893894,  8.94894895,
#[Out]#         8.95895896,  8.96896897,  8.97897898,  8.98898899,  8.998999  ,
#[Out]#         9.00900901,  9.01901902,  9.02902903,  9.03903904,  9.04904905,
#[Out]#         9.05905906,  9.06906907,  9.07907908,  9.08908909,  9.0990991 ,
#[Out]#         9.10910911,  9.11911912,  9.12912913,  9.13913914,  9.14914915,
#[Out]#         9.15915916,  9.16916917,  9.17917918,  9.18918919,  9.1991992 ,
#[Out]#         9.20920921,  9.21921922,  9.22922923,  9.23923924,  9.24924925,
#[Out]#         9.25925926,  9.26926927,  9.27927928,  9.28928929,  9.2992993 ,
#[Out]#         9.30930931,  9.31931932,  9.32932933,  9.33933934,  9.34934935,
#[Out]#         9.35935936,  9.36936937,  9.37937938,  9.38938939,  9.3993994 ,
#[Out]#         9.40940941,  9.41941942,  9.42942943,  9.43943944,  9.44944945,
#[Out]#         9.45945946,  9.46946947,  9.47947948,  9.48948949,  9.4994995 ,
#[Out]#         9.50950951,  9.51951952,  9.52952953,  9.53953954,  9.54954955,
#[Out]#         9.55955956,  9.56956957,  9.57957958,  9.58958959,  9.5995996 ,
#[Out]#         9.60960961,  9.61961962,  9.62962963,  9.63963964,  9.64964965,
#[Out]#         9.65965966,  9.66966967,  9.67967968,  9.68968969,  9.6996997 ,
#[Out]#         9.70970971,  9.71971972,  9.72972973,  9.73973974,  9.74974975,
#[Out]#         9.75975976,  9.76976977,  9.77977978,  9.78978979,  9.7997998 ,
#[Out]#         9.80980981,  9.81981982,  9.82982983,  9.83983984,  9.84984985,
#[Out]#         9.85985986,  9.86986987,  9.87987988,  9.88988989,  9.8998999 ,
#[Out]#         9.90990991,  9.91991992,  9.92992993,  9.93993994,  9.94994995,
#[Out]#         9.95995996,  9.96996997,  9.97997998,  9.98998999, 10.        ])
xfit.shape
#[Out]# (1000,)
type(xfit)
#[Out]# numpy.ndarray
get_ipython().run_line_magic('pinfo', 'xfit')
xfit?？
get_ipython().run_line_magic('pinfo2', 'xfit')
plt.scatter(x,y)
#[Out]# <matplotlib.collections.PathCollection at 0x1f8f2375710>
plt.plot(xfit,yfit)
#[Out]# [<matplotlib.lines.Line2D at 0x1f8f0c22ac8>]
plt.xlim(0,10)
#[Out]# (0, 10)
l3 = [True,'2',3.0,4]
[type(c) for c in l3]
#[Out]# [bool, str, float, int]
np.array([1,2,3,4],dtype='float32')
#[Out]# array([1., 2., 3., 4.], dtype=float32)
np1 = np.array([1,2,3,4],dtype='float32')
np1.dtype
#[Out]# dtype('float32')
np1.astype('int')
#[Out]# array([1, 2, 3, 4])
np1.dtype
#[Out]# dtype('float32')
np.array([range(i,i+3) for i in [2,4,6]])
#[Out]# array([[2, 3, 4],
#[Out]#        [4, 5, 6],
#[Out]#        [6, 7, 8]])
np.array([2,5])
#[Out]# array([2, 5])
np.full((3,5),3.14)
#[Out]# array([[3.14, 3.14, 3.14, 3.14, 3.14],
#[Out]#        [3.14, 3.14, 3.14, 3.14, 3.14],
#[Out]#        [3.14, 3.14, 3.14, 3.14, 3.14]])
np.arange(0,20,2)
#[Out]# array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])
np.linspace(0,1,5)
#[Out]# array([0.  , 0.25, 0.5 , 0.75, 1.  ])
np2 = np.arange(0,20,2)
np3 = np.linspace(0,1,5)
np2[:,np.newaxis]
#[Out]# array([[ 0],
#[Out]#        [ 2],
#[Out]#        [ 4],
#[Out]#        [ 6],
#[Out]#        [ 8],
#[Out]#        [10],
#[Out]#        [12],
#[Out]#        [14],
#[Out]#        [16],
#[Out]#        [18]])
np2[:,None]
#[Out]# array([[ 0],
#[Out]#        [ 2],
#[Out]#        [ 4],
#[Out]#        [ 6],
#[Out]#        [ 8],
#[Out]#        [10],
#[Out]#        [12],
#[Out]#        [14],
#[Out]#        [16],
#[Out]#        [18]])
type(np2[:,None])
#[Out]# numpy.ndarray
np2[:]
#[Out]# array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])
np2[:,]
#[Out]# array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])
np2[:,np.newaxis]
#[Out]# array([[ 0],
#[Out]#        [ 2],
#[Out]#        [ 4],
#[Out]#        [ 6],
#[Out]#        [ 8],
#[Out]#        [10],
#[Out]#        [12],
#[Out]#        [14],
#[Out]#        [16],
#[Out]#        [18]])
type(np2[:,np.newaxis])
#[Out]# numpy.ndarray
type(np[:2])
type(np[:])
np[:]
np2[:]
#[Out]# array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])
type(np2[:])
#[Out]# numpy.ndarray
type(np2[:,])
#[Out]# numpy.ndarray
np.random.random((3,3))
#[Out]# array([[0.96739343, 0.67838039, 0.15023806],
#[Out]#        [0.04706654, 0.45759052, 0.77403837],
#[Out]#        [0.55236576, 0.36302394, 0.44377807]])
np.random.normal(0,1,(3,3))
#[Out]# array([[-2.23044277,  0.4920486 ,  0.9311661 ],
#[Out]#        [ 0.71980814, -0.76166433, -0.45042137],
#[Out]#        [-0.58669768,  0.41826822, -0.16946865]])
np.random.randint(0,10,(3,3))
#[Out]# array([[9, 9, 7],
#[Out]#        [2, 5, 5],
#[Out]#        [1, 5, 6]])
get_ipython().run_line_magic('logstate', '')
get_ipython().run_line_magic('logstop', '')
