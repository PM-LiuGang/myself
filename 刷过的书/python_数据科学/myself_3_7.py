# IPython log file

get_ipython().run_line_magic('cd', 'c')
get_ipython().run_line_magic('ls', '')
data = pd.read_csv('Fremont_Bridge_Hourly_Bicycle_Counts_by_Month_October_2012_to_present.csv',parse_dates=True,index_col='Date')
import pandas as pd
import numpy as np
data = pd.read_csv('Fremont_Bridge_Hourly_Bicycle_Counts_by_Month_October_2012_to_present.csv',parse_dates=True,index_col='Date')
data['Total'] = data.eval('West+East')
data.columns
#[Out]# Index(['Fremont Bridge West Sidewalk', 'Fremont Bridge East Sidewalk'], dtype='object')
data.columns=['West','East']
data['Total'] = data.eval('West+East')
import seaborn
seaborn.set()
daily = data.resample('D').sum()
daily.rolling(50,center=True,win_type='gaussian').sum(std=10),plot(style=['-%','--','-*])
import matplotlib.pyplot as plt
daily.rolling(50,center=True,win_type='gaussian').sum(std=10),plot(style=['-%','--','-*'])
from matplotlib.pyplot import plot
daily.rolling(50,center=True,win_type='gaussian').sum(std=10),plot(style=['-%','--','-*'])
#[Out]# (                    West          East         Total
#[Out]#  Date                                                
#[Out]#  2012-10-03           NaN           NaN           NaN
#[Out]#  2012-10-04           NaN           NaN           NaN
#[Out]#  2012-10-05           NaN           NaN           NaN
#[Out]#  2012-10-06           NaN           NaN           NaN
#[Out]#  2012-10-07           NaN           NaN           NaN
#[Out]#  2012-10-08           NaN           NaN           NaN
#[Out]#  2012-10-09           NaN           NaN           NaN
#[Out]#  2012-10-10           NaN           NaN           NaN
#[Out]#  2012-10-11           NaN           NaN           NaN
#[Out]#  2012-10-12           NaN           NaN           NaN
#[Out]#  2012-10-13           NaN           NaN           NaN
#[Out]#  2012-10-14           NaN           NaN           NaN
#[Out]#  2012-10-15           NaN           NaN           NaN
#[Out]#  2012-10-16           NaN           NaN           NaN
#[Out]#  2012-10-17           NaN           NaN           NaN
#[Out]#  2012-10-18           NaN           NaN           NaN
#[Out]#  2012-10-19           NaN           NaN           NaN
#[Out]#  2012-10-20           NaN           NaN           NaN
#[Out]#  2012-10-21           NaN           NaN           NaN
#[Out]#  2012-10-22           NaN           NaN           NaN
#[Out]#  2012-10-23           NaN           NaN           NaN
#[Out]#  2012-10-24           NaN           NaN           NaN
#[Out]#  2012-10-25           NaN           NaN           NaN
#[Out]#  2012-10-26           NaN           NaN           NaN
#[Out]#  2012-10-27           NaN           NaN           NaN
#[Out]#  2012-10-28  25284.796113  23666.537849  48951.333963
#[Out]#  2012-10-29  25045.955156  23422.813056  48468.768211
#[Out]#  2012-10-30  24812.728199  23189.782774  48002.510974
#[Out]#  2012-10-31  24602.783436  22981.533510  47584.316945
#[Out]#  2012-11-01  24417.302452  22805.005559  47222.308011
#[Out]#  ...                  ...           ...           ...
#[Out]#  2018-04-01  24325.328903  34850.794821  59176.123724
#[Out]#  2018-04-02  24329.098424  34852.966476  59182.064900
#[Out]#  2018-04-03  24350.280550  34886.439416  59236.719966
#[Out]#  2018-04-04  24332.544463  34852.710246  59185.254709
#[Out]#  2018-04-05  24360.096347  34887.970475  59248.066822
#[Out]#  2018-04-06  24435.292853  35014.180808  59449.473662
#[Out]#  2018-04-07           NaN           NaN           NaN
#[Out]#  2018-04-08           NaN           NaN           NaN
#[Out]#  2018-04-09           NaN           NaN           NaN
#[Out]#  2018-04-10           NaN           NaN           NaN
#[Out]#  2018-04-11           NaN           NaN           NaN
#[Out]#  2018-04-12           NaN           NaN           NaN
#[Out]#  2018-04-13           NaN           NaN           NaN
#[Out]#  2018-04-14           NaN           NaN           NaN
#[Out]#  2018-04-15           NaN           NaN           NaN
#[Out]#  2018-04-16           NaN           NaN           NaN
#[Out]#  2018-04-17           NaN           NaN           NaN
#[Out]#  2018-04-18           NaN           NaN           NaN
#[Out]#  2018-04-19           NaN           NaN           NaN
#[Out]#  2018-04-20           NaN           NaN           NaN
#[Out]#  2018-04-21           NaN           NaN           NaN
#[Out]#  2018-04-22           NaN           NaN           NaN
#[Out]#  2018-04-23           NaN           NaN           NaN
#[Out]#  2018-04-24           NaN           NaN           NaN
#[Out]#  2018-04-25           NaN           NaN           NaN
#[Out]#  2018-04-26           NaN           NaN           NaN
#[Out]#  2018-04-27           NaN           NaN           NaN
#[Out]#  2018-04-28           NaN           NaN           NaN
#[Out]#  2018-04-29           NaN           NaN           NaN
#[Out]#  2018-04-30           NaN           NaN           NaN
#[Out]#  
#[Out]#  [2036 rows x 3 columns], [])
daily.rolling(50,center=True,win_type='gaussian').sum(std=10),plot(style=['-%','--','-*'])
#[Out]# (                    West          East         Total
#[Out]#  Date                                                
#[Out]#  2012-10-03           NaN           NaN           NaN
#[Out]#  2012-10-04           NaN           NaN           NaN
#[Out]#  2012-10-05           NaN           NaN           NaN
#[Out]#  2012-10-06           NaN           NaN           NaN
#[Out]#  2012-10-07           NaN           NaN           NaN
#[Out]#  2012-10-08           NaN           NaN           NaN
#[Out]#  2012-10-09           NaN           NaN           NaN
#[Out]#  2012-10-10           NaN           NaN           NaN
#[Out]#  2012-10-11           NaN           NaN           NaN
#[Out]#  2012-10-12           NaN           NaN           NaN
#[Out]#  2012-10-13           NaN           NaN           NaN
#[Out]#  2012-10-14           NaN           NaN           NaN
#[Out]#  2012-10-15           NaN           NaN           NaN
#[Out]#  2012-10-16           NaN           NaN           NaN
#[Out]#  2012-10-17           NaN           NaN           NaN
#[Out]#  2012-10-18           NaN           NaN           NaN
#[Out]#  2012-10-19           NaN           NaN           NaN
#[Out]#  2012-10-20           NaN           NaN           NaN
#[Out]#  2012-10-21           NaN           NaN           NaN
#[Out]#  2012-10-22           NaN           NaN           NaN
#[Out]#  2012-10-23           NaN           NaN           NaN
#[Out]#  2012-10-24           NaN           NaN           NaN
#[Out]#  2012-10-25           NaN           NaN           NaN
#[Out]#  2012-10-26           NaN           NaN           NaN
#[Out]#  2012-10-27           NaN           NaN           NaN
#[Out]#  2012-10-28  25284.796113  23666.537849  48951.333963
#[Out]#  2012-10-29  25045.955156  23422.813056  48468.768211
#[Out]#  2012-10-30  24812.728199  23189.782774  48002.510974
#[Out]#  2012-10-31  24602.783436  22981.533510  47584.316945
#[Out]#  2012-11-01  24417.302452  22805.005559  47222.308011
#[Out]#  ...                  ...           ...           ...
#[Out]#  2018-04-01  24325.328903  34850.794821  59176.123724
#[Out]#  2018-04-02  24329.098424  34852.966476  59182.064900
#[Out]#  2018-04-03  24350.280550  34886.439416  59236.719966
#[Out]#  2018-04-04  24332.544463  34852.710246  59185.254709
#[Out]#  2018-04-05  24360.096347  34887.970475  59248.066822
#[Out]#  2018-04-06  24435.292853  35014.180808  59449.473662
#[Out]#  2018-04-07           NaN           NaN           NaN
#[Out]#  2018-04-08           NaN           NaN           NaN
#[Out]#  2018-04-09           NaN           NaN           NaN
#[Out]#  2018-04-10           NaN           NaN           NaN
#[Out]#  2018-04-11           NaN           NaN           NaN
#[Out]#  2018-04-12           NaN           NaN           NaN
#[Out]#  2018-04-13           NaN           NaN           NaN
#[Out]#  2018-04-14           NaN           NaN           NaN
#[Out]#  2018-04-15           NaN           NaN           NaN
#[Out]#  2018-04-16           NaN           NaN           NaN
#[Out]#  2018-04-17           NaN           NaN           NaN
#[Out]#  2018-04-18           NaN           NaN           NaN
#[Out]#  2018-04-19           NaN           NaN           NaN
#[Out]#  2018-04-20           NaN           NaN           NaN
#[Out]#  2018-04-21           NaN           NaN           NaN
#[Out]#  2018-04-22           NaN           NaN           NaN
#[Out]#  2018-04-23           NaN           NaN           NaN
#[Out]#  2018-04-24           NaN           NaN           NaN
#[Out]#  2018-04-25           NaN           NaN           NaN
#[Out]#  2018-04-26           NaN           NaN           NaN
#[Out]#  2018-04-27           NaN           NaN           NaN
#[Out]#  2018-04-28           NaN           NaN           NaN
#[Out]#  2018-04-29           NaN           NaN           NaN
#[Out]#  2018-04-30           NaN           NaN           NaN
#[Out]#  
#[Out]#  [2036 rows x 3 columns], [])
daily.rolling(50,center=True,win_type='gaussian').sum(std=10).plot(style=['-%','--','-*'])
daily.rolling(50,center=True,win_type='gaussian').sum(std=10).plot(style=[':','--','-*'])
#[Out]# <matplotlib.axes._subplots.AxesSubplot at 0x1fa1062e198>
plt.show()
by_time = data.groupby(data.index.time).mean()
by_time
#[Out]#                 West        East       Total
#[Out]# 00:00:00    5.385069    6.701375   12.086444
#[Out]# 01:00:00    2.962672    3.377210    6.339882
#[Out]# 02:00:00    2.152067    2.117618    4.269685
#[Out]# 03:00:00    1.613458    1.377210    2.990668
#[Out]# 04:00:00    3.538802    2.780452    6.319253
#[Out]# 05:00:00   16.762770    9.113949   25.876719
#[Out]# 06:00:00   58.437623   32.276523   90.714145
#[Out]# 07:00:00  152.931729   72.335462  225.267191
#[Out]# 08:00:00  204.785855  110.582515  315.368369
#[Out]# 09:00:00  111.088943   74.806388  185.895332
#[Out]# 10:00:00   54.832432   42.003931   96.836364
#[Out]# 11:00:00   46.411794   37.598526   84.010319
#[Out]# 12:00:00   48.130713   41.223096   89.353808
#[Out]# 13:00:00   50.429273   45.137525   95.566798
#[Out]# 14:00:00   52.766699   51.178782  103.945481
#[Out]# 15:00:00   62.207269   69.160118  131.367387
#[Out]# 16:00:00   86.109528  129.313360  215.422888
#[Out]# 17:00:00  121.023576  253.578094  374.601670
#[Out]# 18:00:00   96.100688  166.057466  262.158153
#[Out]# 19:00:00   52.037819   76.304519  128.342338
#[Out]# 20:00:00   31.677308   42.215128   73.892436
#[Out]# 21:00:00   21.488703   25.944008   47.432711
#[Out]# 22:00:00   14.428291   17.433202   31.861493
#[Out]# 23:00:00    9.182220   12.048134   21.230354
data.index
#[Out]# DatetimeIndex(['2012-10-03 00:00:00', '2012-10-03 01:00:00',
#[Out]#                '2012-10-03 02:00:00', '2012-10-03 03:00:00',
#[Out]#                '2012-10-03 04:00:00', '2012-10-03 05:00:00',
#[Out]#                '2012-10-03 06:00:00', '2012-10-03 07:00:00',
#[Out]#                '2012-10-03 08:00:00', '2012-10-03 09:00:00',
#[Out]#                ...
#[Out]#                '2018-04-30 14:00:00', '2018-04-30 15:00:00',
#[Out]#                '2018-04-30 16:00:00', '2018-04-30 17:00:00',
#[Out]#                '2018-04-30 18:00:00', '2018-04-30 19:00:00',
#[Out]#                '2018-04-30 20:00:00', '2018-04-30 21:00:00',
#[Out]#                '2018-04-30 22:00:00', '2018-04-30 23:00:00'],
#[Out]#               dtype='datetime64[ns]', name='Date', length=48864, freq=None)
data.index.time
#[Out]# array([datetime.time(0, 0), datetime.time(1, 0), datetime.time(2, 0), ...,
#[Out]#        datetime.time(21, 0), datetime.time(22, 0), datetime.time(23, 0)],
#[Out]#       dtype=object)
len(data.index)
#[Out]# 48864
len(data.index.time)
#[Out]# 48864
data.head()
#[Out]#                      West  East  Total
#[Out]# Date                                  
#[Out]# 2012-10-03 00:00:00   4.0   9.0   13.0
#[Out]# 2012-10-03 01:00:00   4.0   6.0   10.0
#[Out]# 2012-10-03 02:00:00   1.0   1.0    2.0
#[Out]# 2012-10-03 03:00:00   2.0   3.0    5.0
#[Out]# 2012-10-03 04:00:00   6.0   1.0    7.0
hourly_ticks = 4 * 60 * 60 * np.arange(6)
by_time.plot(xticks=hourly_ticks,style=[':','--','-'])
#[Out]# <matplotlib.axes._subplots.AxesSubplot at 0x1fa15b07a58>
plt.show()
hourly_ticks
#[Out]# array([    0, 14400, 28800, 43200, 57600, 72000])
by_weekday = data.groupby(data.index.dayofweek).mean()
data.index
#[Out]# DatetimeIndex(['2012-10-03 00:00:00', '2012-10-03 01:00:00',
#[Out]#                '2012-10-03 02:00:00', '2012-10-03 03:00:00',
#[Out]#                '2012-10-03 04:00:00', '2012-10-03 05:00:00',
#[Out]#                '2012-10-03 06:00:00', '2012-10-03 07:00:00',
#[Out]#                '2012-10-03 08:00:00', '2012-10-03 09:00:00',
#[Out]#                ...
#[Out]#                '2018-04-30 14:00:00', '2018-04-30 15:00:00',
#[Out]#                '2018-04-30 16:00:00', '2018-04-30 17:00:00',
#[Out]#                '2018-04-30 18:00:00', '2018-04-30 19:00:00',
#[Out]#                '2018-04-30 20:00:00', '2018-04-30 21:00:00',
#[Out]#                '2018-04-30 22:00:00', '2018-04-30 23:00:00'],
#[Out]#               dtype='datetime64[ns]', name='Date', length=48864, freq=None)
by_weekday,index = ['Mon','Tues','Wed','Thurs','Fir','Sat','Sun']
by_weekday.index
#[Out]# Int64Index([0, 1, 2, 3, 4, 5, 6], dtype='int64', name='Date')
by_weekday,index = ['Mon','Tues','Wed','Thurs','Fir','Sat','Su
len(by_weekday)
#[Out]# 7
by_weekday,index = ['Mon','Tues','Wed','Thurs','Fir','Sat','Sum']
by_weekday,index = ['Mon','Tues','Wed','Thurs','Fir','Sat','Sun']
by_weekday,index = ['Mon','Tues','Wed','Thurs','Fir']
by_weekday = data.groupby(data.index.dayofweek).mean()
len(by_weekday)
#[Out]# 7
type(by_weekday)
#[Out]# pandas.core.frame.DataFrame
by_weekday.index
#[Out]# Int64Index([0, 1, 2, 3, 4, 5, 6], dtype='int64', name='Date')
by_weekday.columns
#[Out]# Index(['West', 'East', 'Total'], dtype='object')
by_weekday.index = ['Mon','Tues','Wed','Thurs','Fir','Sat','Sun']
by_weekday.plot(style=[':','--','-'])
#[Out]# <matplotlib.axes._subplots.AxesSubplot at 0x1fa16801320>
plt.show()
by_weekday.index
#[Out]# Index(['Mon', 'Tues', 'Wed', 'Thurs', 'Fir', 'Sat', 'Sun'], dtype='object')
plt.plot(by_weekday,style=[':','--','-'])
plt.plot(by_weekday,style=[':','--','-'])
plt.plot(by_weekday,style=[':','--','-'])
plt.plot(by_weekday,style=['--','-'])
by_weekday.plot(style=[':','--','-'])
#[Out]# <matplotlib.axes._subplots.AxesSubplot at 0x1fa1674e470>
plt.show()
plt.xticks([1,2,3,4,5,6,7])
#[Out]# ([<matplotlib.axis.XTick at 0x1fa18646f98>,
#[Out]#   <matplotlib.axis.XTick at 0x1fa18646b70>,
#[Out]#   <matplotlib.axis.XTick at 0x1fa186ddf60>,
#[Out]#   <matplotlib.axis.XTick at 0x1fa16b304a8>,
#[Out]#   <matplotlib.axis.XTick at 0x1fa16b30ba8>,
#[Out]#   <matplotlib.axis.XTick at 0x1fa16b362e8>,
#[Out]#   <matplotlib.axis.XTick at 0x1fa16b369e8>],
#[Out]#  <a list of 7 Text xticklabel objects>)
by_weekday.plot(style=[':','--','-'])
#[Out]# <matplotlib.axes._subplots.AxesSubplot at 0x1fa18646ac8>
plt.xticks([1,2,3,4,5,6,7])
#[Out]# ([<matplotlib.axis.XTick at 0x1fa16b3fc18>,
#[Out]#   <matplotlib.axis.XTick at 0x1fa16b36be0>,
#[Out]#   <matplotlib.axis.XTick at 0x1fa1780d860>,
#[Out]#   <matplotlib.axis.XTick at 0x1fa178ee550>,
#[Out]#   <matplotlib.axis.XTick at 0x1fa178eec50>,
#[Out]#   <matplotlib.axis.XTick at 0x1fa178f9390>,
#[Out]#   <matplotlib.axis.XTick at 0x1fa178f9a90>],
#[Out]#  <a list of 7 Text xticklabel objects>)
plt.show()
weekend = np.where(data.index.weekday < 5 ,'weekday','weekend')
weekend
#[Out]# array(['weekday', 'weekday', 'weekday', ..., 'weekday', 'weekday',
#[Out]#        'weekday'], dtype='<U7')
weekend.value_counts()
weekend.counts
weekend.counts.count()
len(weekend['weekday'],weekend['Weekend'])
len(weekend['weekday'])
weekend
#[Out]# array(['weekday', 'weekday', 'weekday', ..., 'weekday', 'weekday',
#[Out]#        'weekday'], dtype='<U7')
len(weekend = 'weekday')
by_time = data.groupby([weekend,data.index.time]).mean()
fig,ax = plt.subplots(1,2,figsize=(14,5))
by_time.loc['weekday'].plot(ax=ax[0],title='Weekdays',xticks=hourly_ticks)
#[Out]# <matplotlib.axes._subplots.AxesSubplot at 0x1fa166c9f60>
by_time.loc['weekend'].plot(ax=ax[1],title='Weekends',xticks=hourly_ticks)
#[Out]# <matplotlib.axes._subplots.AxesSubplot at 0x1fa16bd9748>
plt.show()
import numpy as np
rng = np.random.RandomState(42)
x = rng.rand(16)
y = rng.rand(1e6)
y = rng.rand(1E6)
y = rng.rand(1E6)
y = rng.rand(1*10^6)
x = rng.rand(1*10^6)
get_ipython().run_line_magic('timeit', 'x + y')
x.shaoe
x.shaoe
x.shape
#[Out]# (12,)
y.shape
#[Out]# (12,)
get_ipython().run_line_magic('timeit', 'np.fromiter((xi + yi for xi,yi in zip(x,y)),dtype=x.dtype,count=len(x))')
mask = (x >0.5) & (y< 0.5)
tmp1 = x >0.5
tmp2 = y<0.5
mask = tmp1 & tmp 2
mask = tmp1 & tmp2
mask
#[Out]# array([ True, False,  True, False, False,  True,  True,  True, False,
#[Out]#        False,  True, False])
import numexpr
mask_numexpr = numexpr.evaluate('(x>0.5)&(y<0.5)')
np.allclose(mask,mask_numexpr)
#[Out]# True
mask_numexpr
#[Out]# array([ True, False,  True, False, False,  True,  True,  True, False,
#[Out]#        False,  True, False])
nrows,ncols = 100000,100
rng = np.random.RandomState(42)
df1,df2,df3,df4 = (pd.DataFrame(rng.rand(nrows,ncols)) for i in range(4))
df1
#[Out]#              0         1         2         3         4         5         6   \
#[Out]# 0      0.374540  0.950714  0.731994  0.598658  0.156019  0.155995  0.058084   
#[Out]# 1      0.031429  0.636410  0.314356  0.508571  0.907566  0.249292  0.410383   
#[Out]# 2      0.642032  0.084140  0.161629  0.898554  0.606429  0.009197  0.101472   
#[Out]# 3      0.051682  0.531355  0.540635  0.637430  0.726091  0.975852  0.516300   
#[Out]# 4      0.103124  0.902553  0.505252  0.826457  0.320050  0.895523  0.389202   
#[Out]# 5      0.698162  0.536096  0.309528  0.813795  0.684731  0.162617  0.910927   
#[Out]# 6      0.168935  0.278590  0.177010  0.088703  0.120636  0.460779  0.206334   
#[Out]# 7      0.532589  0.051824  0.336604  0.134415  0.063375  0.989960  0.322354   
#[Out]# 8      0.707239  0.152539  0.576288  0.606715  0.424131  0.736444  0.934367   
#[Out]# 9      0.207886  0.026532  0.181435  0.583042  0.421425  0.892672  0.817444   
#[Out]# 10     0.185133  0.541901  0.872946  0.732225  0.806561  0.658783  0.692277   
#[Out]# 11     0.057843  0.969103  0.883786  0.927752  0.994908  0.173895  0.396242   
#[Out]# 12     0.758263  0.024587  0.022124  0.323610  0.488643  0.770407  0.683295   
#[Out]# 13     0.031586  0.936212  0.051971  0.541296  0.709061  0.870969  0.714087   
#[Out]# 14     0.167042  0.167619  0.036671  0.736402  0.663805  0.474631  0.844170   
#[Out]# 15     0.519082  0.479182  0.025642  0.341248  0.380196  0.398823  0.580172   
#[Out]# 16     0.191867  0.323372  0.226656  0.354996  0.069424  0.519060  0.067613   
#[Out]# 17     0.965822  0.432498  0.311816  0.506142  0.439512  0.105665  0.640826   
#[Out]# 18     0.956501  0.737508  0.353251  0.296536  0.349703  0.774654  0.661371   
#[Out]# 19     0.554227  0.005230  0.760991  0.035311  0.745734  0.202481  0.958073   
#[Out]# 20     0.261706  0.246979  0.906255  0.249546  0.271950  0.759398  0.449740   
#[Out]# 21     0.915090  0.533029  0.157955  0.695899  0.793261  0.316762  0.857179   
#[Out]# 22     0.976800  0.110721  0.422548  0.042025  0.739904  0.918077  0.280037   
#[Out]# 23     0.802586  0.572049  0.512668  0.293489  0.931754  0.397015  0.087093   
#[Out]# 24     0.340604  0.071712  0.409629  0.311217  0.677121  0.605779  0.364594   
#[Out]# 25     0.827519  0.764528  0.573529  0.956047  0.200475  0.109264  0.853962   
#[Out]# 26     0.629558  0.054332  0.748645  0.317587  0.000135  0.511129  0.046852   
#[Out]# 27     0.521296  0.976014  0.125550  0.016948  0.770158  0.807156  0.120207   
#[Out]# 28     0.792595  0.907899  0.943702  0.960136  0.521460  0.977308  0.757310   
#[Out]# 29     0.127867  0.765547  0.000012  0.416566  0.522510  0.054634  0.973078   
#[Out]# ...         ...       ...       ...       ...       ...       ...       ...   
#[Out]# 99970  0.235068  0.164406  0.204480  0.695623  0.620907  0.382475  0.405872   
#[Out]# 99971  0.086616  0.958037  0.394750  0.960303  0.067067  0.032186  0.654181   
#[Out]# 99972  0.379233  0.098840  0.248029  0.898884  0.891866  0.481938  0.921651   
#[Out]# 99973  0.955915  0.137703  0.309331  0.165853  0.816364  0.265619  0.966744   
#[Out]# 99974  0.131291  0.296078  0.572275  0.778057  0.817213  0.472782  0.082893   
#[Out]# 99975  0.624783  0.727909  0.242309  0.722513  0.200420  0.020648  0.137692   
#[Out]# 99976  0.360348  0.489840  0.157838  0.460680  0.760497  0.748482  0.999405   
#[Out]# 99977  0.135283  0.630029  0.297396  0.163971  0.326433  0.705754  0.670912   
#[Out]# 99978  0.140605  0.741371  0.767181  0.825379  0.920643  0.946323  0.441651   
#[Out]# 99979  0.863263  0.335676  0.274821  0.617637  0.497933  0.695371  0.662931   
#[Out]# 99980  0.552460  0.204735  0.047733  0.870659  0.889835  0.738405  0.047427   
#[Out]# 99981  0.643029  0.379354  0.046678  0.604171  0.444815  0.357861  0.123796   
#[Out]# 99982  0.301865  0.090758  0.915868  0.654676  0.087175  0.184472  0.351889   
#[Out]# 99983  0.097869  0.478870  0.989644  0.356564  0.671516  0.173360  0.737817   
#[Out]# 99984  0.922311  0.294625  0.973756  0.705608  0.800295  0.898579  0.202989   
#[Out]# 99985  0.155191  0.286228  0.147640  0.595086  0.574276  0.484575  0.257927   
#[Out]# 99986  0.633946  0.704074  0.722275  0.081072  0.569328  0.429807  0.503325   
#[Out]# 99987  0.181690  0.016564  0.638306  0.756501  0.791164  0.014827  0.580145   
#[Out]# 99988  0.639394  0.038863  0.508547  0.430462  0.057445  0.931414  0.934094   
#[Out]# 99989  0.430002  0.993991  0.861573  0.872902  0.622845  0.414641  0.771986   
#[Out]# 99990  0.347023  0.455422  0.580355  0.651958  0.605102  0.890908  0.790991   
#[Out]# 99991  0.698221  0.295168  0.769935  0.270100  0.258748  0.576954  0.608767   
#[Out]# 99992  0.345131  0.239160  0.165095  0.910056  0.367533  0.686016  0.323124   
#[Out]# 99993  0.514883  0.454818  0.096102  0.188268  0.345554  0.375190  0.426944   
#[Out]# 99994  0.273208  0.369597  0.495740  0.492283  0.525639  0.187136  0.322609   
#[Out]# 99995  0.071979  0.439323  0.188588  0.586705  0.640611  0.662409  0.318503   
#[Out]# 99996  0.313411  0.010490  0.469216  0.600825  0.451085  0.496918  0.983128   
#[Out]# 99997  0.560873  0.647396  0.043068  0.282439  0.042950  0.346690  0.954034   
#[Out]# 99998  0.710115  0.067999  0.611329  0.136199  0.054724  0.018160  0.911428   
#[Out]# 99999  0.116834  0.461155  0.754556  0.250272  0.864631  0.588966  0.358260   
#[Out]# 
#[Out]#              7         8         9     ...           90        91        92  \
#[Out]# 0      0.866176  0.601115  0.708073    ...     0.119594  0.713245  0.760785   
#[Out]# 1      0.755551  0.228798  0.076980    ...     0.093103  0.897216  0.900418   
#[Out]# 2      0.663502  0.005062  0.160808    ...     0.030500  0.037348  0.822601   
#[Out]# 3      0.322956  0.795186  0.270832    ...     0.990505  0.412618  0.372018   
#[Out]# 4      0.010838  0.905382  0.091287    ...     0.455657  0.620133  0.277381   
#[Out]# 5      0.822537  0.949800  0.725720    ...     0.138827  0.640875  0.181880   
#[Out]# 6      0.364270  0.503417  0.690395    ...     0.323679  0.425436  0.507610   
#[Out]# 7      0.809874  0.254641  0.681503    ...     0.153351  0.586230  0.505889   
#[Out]# 8      0.925569  0.450839  0.113238    ...     0.722267  0.855696  0.830220   
#[Out]# 9      0.341817  0.259423  0.379692    ...     0.799416  0.694696  0.272145   
#[Out]# 10     0.849196  0.249668  0.489425    ...     0.942732  0.649647  0.607737   
#[Out]# 11     0.758238  0.696021  0.153896    ...     0.067351  0.582170  0.345883   
#[Out]# 12     0.445903  0.273627  0.997125    ...     0.396923  0.132716  0.567541   
#[Out]# 13     0.801728  0.339450  0.814825    ...     0.236050  0.073497  0.169758   
#[Out]# 14     0.805670  0.585354  0.868271    ...     0.237544  0.373252  0.227270   
#[Out]# 15     0.533603  0.607905  0.764883    ...     0.692436  0.991256  0.128394   
#[Out]# 16     0.800357  0.233712  0.540012    ...     0.174839  0.502566  0.398663   
#[Out]# 17     0.216038  0.619588  0.650201    ...     0.150169  0.737434  0.512222   
#[Out]# 18     0.185196  0.174109  0.098396    ...     0.099178  0.401494  0.800071   
#[Out]# 19     0.367941  0.326932  0.148888    ...     0.765513  0.158908  0.610225   
#[Out]# 20     0.776711  0.065366  0.487571    ...     0.775612  0.964477  0.203766   
#[Out]# 21     0.906143  0.276904  0.983521    ...     0.260287  0.907195  0.670732   
#[Out]# 22     0.858342  0.292218  0.910770    ...     0.610780  0.280683  0.206993   
#[Out]# 23     0.617067  0.113838  0.345223    ...     0.374553  0.166860  0.430529   
#[Out]# 24     0.217893  0.988036  0.454002    ...     0.285784  0.203223  0.761798   
#[Out]# 25     0.439150  0.846969  0.893090    ...     0.822535  0.803959  0.552501   
#[Out]# 26     0.276170  0.706976  0.062690    ...     0.530938  0.595132  0.009924   
#[Out]# 27     0.265583  0.017552  0.293309    ...     0.711723  0.981144  0.569540   
#[Out]# 28     0.161671  0.476900  0.718331    ...     0.332191  0.693618  0.771123   
#[Out]# 29     0.226125  0.304199  0.303943    ...     0.179256  0.800003  0.552707   
#[Out]# ...         ...       ...       ...    ...          ...       ...       ...   
#[Out]# 99970  0.457494  0.045196  0.255887    ...     0.451413  0.575522  0.211959   
#[Out]# 99971  0.703395  0.338712  0.013371    ...     0.551509  0.598471  0.354176   
#[Out]# 99972  0.738893  0.596650  0.952869    ...     0.898590  0.596512  0.390711   
#[Out]# 99973  0.550885  0.859650  0.690606    ...     0.361937  0.956475  0.647543   
#[Out]# 99974  0.711263  0.038564  0.894496    ...     0.722973  0.550548  0.939560   
#[Out]# 99975  0.240654  0.301705  0.339952    ...     0.872916  0.121189  0.956220   
#[Out]# 99976  0.453320  0.623236  0.477265    ...     0.211778  0.637911  0.514737   
#[Out]# 99977  0.257294  0.824275  0.614181    ...     0.028971  0.029875  0.695664   
#[Out]# 99978  0.150067  0.013397  0.098166    ...     0.580735  0.622445  0.255824   
#[Out]# 99979  0.790257  0.877444  0.291327    ...     0.950058  0.846885  0.912907   
#[Out]# 99980  0.969874  0.207423  0.063859    ...     0.965015  0.483943  0.246622   
#[Out]# 99981  0.693185  0.486504  0.245919    ...     0.755066  0.799375  0.980545   
#[Out]# 99982  0.395700  0.740636  0.489956    ...     0.365312  0.178367  0.236884   
#[Out]# 99983  0.545002  0.297150  0.268483    ...     0.839236  0.706875  0.494209   
#[Out]# 99984  0.580991  0.064214  0.200963    ...     0.844979  0.616330  0.456148   
#[Out]# 99985  0.582043  0.616274  0.667861    ...     0.288585  0.445969  0.526146   
#[Out]# 99986  0.124079  0.907871  0.862132    ...     0.704263  0.434238  0.015545   
#[Out]# 99987  0.193434  0.026889  0.812171    ...     0.395551  0.344729  0.303583   
#[Out]# 99988  0.354220  0.323971  0.400175    ...     0.185113  0.907019  0.214367   
#[Out]# 99989  0.141741  0.305980  0.445624    ...     0.747635  0.488745  0.543308   
#[Out]# 99990  0.820513  0.548596  0.211588    ...     0.626052  0.685421  0.216209   
#[Out]# 99991  0.176622  0.587120  0.834721    ...     0.039653  0.404618  0.432767   
#[Out]# 99992  0.680629  0.529727  0.893343    ...     0.276529  0.942943  0.825374   
#[Out]# 99993  0.284893  0.973188  0.316560    ...     0.000172  0.533081  0.359184   
#[Out]# 99994  0.901747  0.882896  0.467634    ...     0.837200  0.969355  0.574925   
#[Out]# 99995  0.600419  0.609742  0.390592    ...     0.122887  0.491140  0.032855   
#[Out]# 99996  0.422056  0.719077  0.045588    ...     0.072444  0.715574  0.300257   
#[Out]# 99997  0.603182  0.447768  0.888498    ...     0.880079  0.508377  0.442052   
#[Out]# 99998  0.762005  0.245312  0.891027    ...     0.249632  0.894231  0.342761   
#[Out]# 99999  0.655541  0.946702  0.145819    ...     0.298095  0.496018  0.990856   
#[Out]# 
#[Out]#              93        94        95        96        97        98        99  
#[Out]# 0      0.561277  0.770967  0.493796  0.522733  0.427541  0.025419  0.107891  
#[Out]# 1      0.633101  0.339030  0.349210  0.725956  0.897110  0.887086  0.779876  
#[Out]# 2      0.360191  0.127061  0.522243  0.769994  0.215821  0.622890  0.085347  
#[Out]# 3      0.776413  0.340804  0.930757  0.858413  0.428994  0.750871  0.754543  
#[Out]# 4      0.188121  0.463698  0.353352  0.583656  0.077735  0.974395  0.986211  
#[Out]# 5      0.345667  0.896788  0.473962  0.667558  0.172320  0.192289  0.040869  
#[Out]# 6      0.242410  0.114837  0.610620  0.288631  0.581238  0.154363  0.481140  
#[Out]# 7      0.611454  0.018110  0.872124  0.932118  0.565133  0.696651  0.922499  
#[Out]# 8      0.397184  0.668085  0.204984  0.293148  0.896336  0.013002  0.085509  
#[Out]# 9      0.590231  0.360974  0.091582  0.917314  0.136819  0.950237  0.446006  
#[Out]# 10     0.512689  0.230670  0.176528  0.220486  0.186438  0.779584  0.350125  
#[Out]# 11     0.620916  0.045742  0.871537  0.973489  0.968878  0.749652  0.130086  
#[Out]# 12     0.689465  0.800587  0.200150  0.167483  0.104568  0.636430  0.706476  
#[Out]# 13     0.519774  0.337003  0.828883  0.430888  0.248714  0.617145  0.706777  
#[Out]# 14     0.073196  0.603449  0.668213  0.619490  0.463494  0.379786  0.863334  
#[Out]# 15     0.104110  0.724339  0.578387  0.274161  0.079419  0.085658  0.894191  
#[Out]# 16     0.146374  0.367534  0.068172  0.025812  0.135166  0.963115  0.549530  
#[Out]# 17     0.680228  0.041673  0.084792  0.716323  0.072084  0.071257  0.012108  
#[Out]# 18     0.204036  0.555085  0.733071  0.615985  0.188025  0.355385  0.783792  
#[Out]# 19     0.135354  0.751375  0.656955  0.956615  0.068958  0.057055  0.282187  
#[Out]# 20     0.523330  0.287138  0.792854  0.577593  0.634582  0.797914  0.395970  
#[Out]# 21     0.560441  0.110989  0.447056  0.460358  0.864564  0.546648  0.380401  
#[Out]# 22     0.516573  0.005506  0.007664  0.219069  0.036721  0.108026  0.338861  
#[Out]# 23     0.142594  0.890097  0.345877  0.154460  0.025448  0.645822  0.636902  
#[Out]# 24     0.386541  0.511275  0.492325  0.577279  0.865577  0.980739  0.407584  
#[Out]# 25     0.520170  0.142876  0.775346  0.271409  0.496695  0.284274  0.133828  
#[Out]# 26     0.464095  0.963499  0.519032  0.677542  0.311864  0.773991  0.772921  
#[Out]# 27     0.259542  0.436996  0.593561  0.073082  0.622343  0.981178  0.190108  
#[Out]# 28     0.654651  0.151595  0.875883  0.539095  0.282472  0.425228  0.037571  
#[Out]# 29     0.396554  0.131715  0.865296  0.157273  0.309788  0.290046  0.871414  
#[Out]# ...         ...       ...       ...       ...       ...       ...       ...  
#[Out]# 99970  0.449871  0.856108  0.957182  0.425956  0.862490  0.109002  0.640205  
#[Out]# 99971  0.887739  0.812608  0.579638  0.612157  0.237888  0.877288  0.421026  
#[Out]# 99972  0.408632  0.328114  0.310661  0.028734  0.169148  0.927362  0.942131  
#[Out]# 99973  0.270071  0.609093  0.094974  0.579509  0.009592  0.456242  0.225408  
#[Out]# 99974  0.399065  0.641603  0.838948  0.896748  0.018142  0.894369  0.402269  
#[Out]# 99975  0.112393  0.878292  0.534969  0.064356  0.588253  0.437656  0.056119  
#[Out]# 99976  0.466302  0.704304  0.621937  0.692636  0.913747  0.061114  0.379862  
#[Out]# 99977  0.898406  0.155490  0.953044  0.168571  0.031259  0.408373  0.350051  
#[Out]# 99978  0.859527  0.627415  0.863540  0.879460  0.699038  0.587971  0.281232  
#[Out]# 99979  0.095023  0.868228  0.613783  0.968045  0.159985  0.169796  0.436445  
#[Out]# 99980  0.910535  0.380975  0.720555  0.958322  0.362283  0.973920  0.121145  
#[Out]# 99981  0.072966  0.842906  0.587632  0.567313  0.676947  0.903825  0.028305  
#[Out]# 99982  0.575780  0.270362  0.489001  0.216059  0.661324  0.503509  0.265636  
#[Out]# 99983  0.063632  0.497177  0.726481  0.833540  0.010382  0.089958  0.950409  
#[Out]# 99984  0.155657  0.175591  0.005538  0.714529  0.715092  0.119119  0.903085  
#[Out]# 99985  0.615828  0.592677  0.005026  0.176165  0.796707  0.366958  0.636098  
#[Out]# 99986  0.789037  0.815795  0.102522  0.474656  0.810993  0.912267  0.721398  
#[Out]# 99987  0.124131  0.214831  0.870567  0.961686  0.897293  0.662502  0.374643  
#[Out]# 99988  0.330600  0.156625  0.614805  0.412807  0.416301  0.222316  0.678655  
#[Out]# 99989  0.422419  0.905223  0.629400  0.505090  0.735041  0.120995  0.179475  
#[Out]# 99990  0.740264  0.712796  0.242585  0.326913  0.793120  0.565565  0.312076  
#[Out]# 99991  0.185978  0.085630  0.801492  0.144680  0.291086  0.235920  0.951461  
#[Out]# 99992  0.882899  0.728829  0.829473  0.211852  0.554510  0.429568  0.073304  
#[Out]# 99993  0.140308  0.712595  0.016308  0.413832  0.205651  0.794271  0.750565  
#[Out]# 99994  0.643373  0.439800  0.411788  0.840367  0.485335  0.828684  0.721273  
#[Out]# 99995  0.567250  0.428673  0.421092  0.021024  0.398596  0.405897  0.869783  
#[Out]# 99996  0.087290  0.130703  0.549202  0.287877  0.589258  0.516884  0.254370  
#[Out]# 99997  0.621332  0.314942  0.131085  0.697310  0.111705  0.397560  0.988347  
#[Out]# 99998  0.844330  0.659797  0.835561  0.117920  0.211202  0.931760  0.296913  
#[Out]# 99999  0.368719  0.837910  0.244971  0.061637  0.933295  0.245149  0.388890  
#[Out]# 
#[Out]# [100000 rows x 100 columns]
df1.head()
#[Out]#          0         1         2         3         4         5         6   \
#[Out]# 0  0.374540  0.950714  0.731994  0.598658  0.156019  0.155995  0.058084   
#[Out]# 1  0.031429  0.636410  0.314356  0.508571  0.907566  0.249292  0.410383   
#[Out]# 2  0.642032  0.084140  0.161629  0.898554  0.606429  0.009197  0.101472   
#[Out]# 3  0.051682  0.531355  0.540635  0.637430  0.726091  0.975852  0.516300   
#[Out]# 4  0.103124  0.902553  0.505252  0.826457  0.320050  0.895523  0.389202   
#[Out]# 
#[Out]#          7         8         9     ...           90        91        92  \
#[Out]# 0  0.866176  0.601115  0.708073    ...     0.119594  0.713245  0.760785   
#[Out]# 1  0.755551  0.228798  0.076980    ...     0.093103  0.897216  0.900418   
#[Out]# 2  0.663502  0.005062  0.160808    ...     0.030500  0.037348  0.822601   
#[Out]# 3  0.322956  0.795186  0.270832    ...     0.990505  0.412618  0.372018   
#[Out]# 4  0.010838  0.905382  0.091287    ...     0.455657  0.620133  0.277381   
#[Out]# 
#[Out]#          93        94        95        96        97        98        99  
#[Out]# 0  0.561277  0.770967  0.493796  0.522733  0.427541  0.025419  0.107891  
#[Out]# 1  0.633101  0.339030  0.349210  0.725956  0.897110  0.887086  0.779876  
#[Out]# 2  0.360191  0.127061  0.522243  0.769994  0.215821  0.622890  0.085347  
#[Out]# 3  0.776413  0.340804  0.930757  0.858413  0.428994  0.750871  0.754543  
#[Out]# 4  0.188121  0.463698  0.353352  0.583656  0.077735  0.974395  0.986211  
#[Out]# 
#[Out]# [5 rows x 100 columns]
df2.head()
#[Out]#          0         1         2         3         4         5         6   \
#[Out]# 0  0.926538  0.382461  0.871469  0.761471  0.328826  0.988821  0.120738   
#[Out]# 1  0.715167  0.490948  0.904532  0.319521  0.582585  0.980330  0.019068   
#[Out]# 2  0.975796  0.049902  0.092684  0.158453  0.858309  0.652550  0.681106   
#[Out]# 3  0.369458  0.911366  0.892686  0.763454  0.581681  0.207756  0.024249   
#[Out]# 4  0.794953  0.714644  0.652743  0.639999  0.801813  0.223324  0.468607   
#[Out]# 
#[Out]#          7         8         9     ...           90        91        92  \
#[Out]# 0  0.358905  0.954462  0.004711    ...     0.310465  0.816988  0.930747   
#[Out]# 1  0.089363  0.281105  0.143648    ...     0.433028  0.132540  0.263659   
#[Out]# 2  0.360168  0.843117  0.619341    ...     0.156821  0.772316  0.412088   
#[Out]# 3  0.925860  0.191849  0.047043    ...     0.313598  0.566552  0.844425   
#[Out]# 4  0.409739  0.846211  0.488558    ...     0.349061  0.986111  0.389271   
#[Out]# 
#[Out]#          93        94        95        96        97        98        99  
#[Out]# 0  0.111477  0.772517  0.801181  0.466825  0.005912  0.705110  0.487674  
#[Out]# 1  0.339079  0.234842  0.507921  0.544545  0.197424  0.432392  0.218104  
#[Out]# 2  0.796167  0.548580  0.722526  0.141587  0.459266  0.128221  0.661666  
#[Out]# 3  0.079068  0.338430  0.921877  0.856621  0.285027  0.505441  0.571166  
#[Out]# 4  0.428010  0.645183  0.998789  0.805533  0.310009  0.876316  0.946936  
#[Out]# 
#[Out]# [5 rows x 100 columns]
pd.eval('df1+df2+df3+df4')
#[Out]#              0         1         2         3         4         5         6   \
#[Out]# 0      2.456085  2.240325  2.189299  2.796486  0.997756  1.857199  0.836188   
#[Out]# 1      1.930732  1.325833  2.100320  1.031509  2.216550  2.322945  2.221711   
#[Out]# 2      2.961585  1.241173  1.292687  1.559529  3.244460  1.727601  1.508593   
#[Out]# 3      1.325278  2.311100  3.153195  2.428513  2.468706  2.168389  1.036675   
#[Out]# 4      1.107165  1.998018  2.171741  3.011473  2.403474  1.785172  1.148053   
#[Out]# 5      2.529727  2.286030  1.841785  2.541460  1.769361  1.050646  2.075684   
#[Out]# 6      1.833114  2.550224  1.876560  2.686080  2.105999  1.495751  2.170603   
#[Out]# 7      2.289387  1.210696  1.918794  1.483511  1.278016  3.160189  1.160647   
#[Out]# 8      3.505600  0.808907  2.404487  2.225093  2.322124  2.821739  3.197666   
#[Out]# 9      0.969624  1.649156  2.804440  2.420300  1.520629  3.108249  2.920252   
#[Out]# 10     1.453052  1.816415  2.583319  2.900471  2.035049  1.853284  2.122161   
#[Out]# 11     0.673214  2.534474  1.947575  1.940661  1.876430  1.794956  1.588995   
#[Out]# 12     2.152171  1.906601  1.889178  1.307331  3.143899  1.655625  1.447486   
#[Out]# 13     1.703104  2.690384  1.323316  1.741178  2.034659  2.565745  2.283950   
#[Out]# 14     1.232189  1.038214  1.607278  1.850894  2.223648  2.193560  2.068241   
#[Out]# 15     1.449457  1.749207  1.275558  2.100333  1.708329  1.845191  2.385540   
#[Out]# 16     1.897001  1.811584  1.759278  2.711842  0.536237  1.754557  2.124654   
#[Out]# 17     3.029724  1.736270  1.988045  1.782844  2.931015  1.353246  2.389335   
#[Out]# 18     2.117062  1.780246  1.993014  1.100525  2.025774  2.308838  2.631418   
#[Out]# 19     2.027139  1.467598  2.665543  0.556862  3.420525  1.637984  3.276057   
#[Out]# 20     1.186245  1.445597  2.637205  1.684491  2.401435  2.734657  1.799661   
#[Out]# 21     1.962968  2.162168  1.779002  1.904916  3.084050  1.797401  2.296266   
#[Out]# 22     1.742456  1.973178  1.422866  1.206253  1.819131  2.304513  1.637438   
#[Out]# 23     1.507669  2.304746  2.188949  2.394654  3.022431  1.691653  2.288863   
#[Out]# 24     1.667253  2.304801  1.643218  1.906900  1.741269  2.564624  1.290231   
#[Out]# 25     3.038242  2.849454  1.327922  2.443321  1.794859  2.692499  2.885290   
#[Out]# 26     2.210038  2.126220  2.389147  1.711662  1.183796  2.008372  1.156781   
#[Out]# 27     1.407491  1.865896  1.613920  0.602684  1.981845  2.752007  1.827062   
#[Out]# 28     3.267052  3.165638  2.996827  2.824158  2.541678  2.305835  3.357698   
#[Out]# 29     0.768083  2.968913  1.981050  1.806244  1.325520  1.396097  2.039139   
#[Out]# ...         ...       ...       ...       ...       ...       ...       ...   
#[Out]# 99970  2.720973  2.099281  1.511831  1.572617  2.167500  1.867705  1.833032   
#[Out]# 99971  0.900667  1.923872  1.960494  2.716563  1.443832  0.934237  2.268561   
#[Out]# 99972  1.879358  2.131145  1.822741  3.272078  2.993150  1.582101  2.573320   
#[Out]# 99973  2.841798  1.950204  2.116629  1.694168  2.457025  1.590836  2.402997   
#[Out]# 99974  2.089462  1.760106  2.524023  2.706587  2.532305  1.233845  0.957262   
#[Out]# 99975  1.870908  2.127161  2.774161  2.002181  2.492638  1.125879  0.999363   
#[Out]# 99976  2.427957  1.992240  1.899150  2.797071  1.367548  2.243787  3.331564   
#[Out]# 99977  1.853213  2.262653  1.474000  1.221203  1.221548  2.969487  2.733378   
#[Out]# 99978  1.806707  2.616367  2.561749  2.908497  2.122009  2.382147  2.123836   
#[Out]# 99979  1.921293  1.053692  1.163612  2.438733  1.985102  2.459441  1.923761   
#[Out]# 99980  1.548266  1.523914  0.516430  2.063182  2.612366  2.721419  1.687046   
#[Out]# 99981  2.136861  0.682177  0.945267  2.367237  1.686822  1.564250  1.656511   
#[Out]# 99982  2.346649  1.329105  2.673362  2.339481  1.028955  0.766322  2.093564   
#[Out]# 99983  1.405765  2.070329  2.172424  2.314741  1.794237  1.908839  3.413787   
#[Out]# 99984  2.362765  2.190928  3.471756  2.511914  2.920498  1.645430  1.852813   
#[Out]# 99985  1.653298  1.170811  2.648263  1.464368  3.376029  2.686461  1.818216   
#[Out]# 99986  2.321994  2.726122  2.305241  1.317790  2.245922  2.633858  2.340699   
#[Out]# 99987  1.212179  1.159788  2.803700  1.870679  1.772416  0.787019  2.292537   
#[Out]# 99988  1.945091  1.639819  1.918852  2.179307  1.304276  1.981897  2.492099   
#[Out]# 99989  2.040032  2.192537  2.147737  3.802939  2.040119  1.692062  2.227425   
#[Out]# 99990  1.237808  2.223027  2.474764  2.773193  2.484599  2.689616  3.228562   
#[Out]# 99991  2.436503  2.566128  3.070286  2.606898  1.724611  2.400306  1.825963   
#[Out]# 99992  2.133103  1.652657  2.064544  2.609207  1.124066  1.625627  1.686558   
#[Out]# 99993  2.635077  1.655436  0.735955  2.045954  1.779264  1.714414  1.074490   
#[Out]# 99994  2.208062  1.768444  2.929948  1.804712  1.989707  2.473341  2.055708   
#[Out]# 99995  1.948321  1.751224  2.276621  2.203974  2.752196  1.811677  1.544824   
#[Out]# 99996  2.249443  2.248954  2.840738  2.278969  1.552147  1.613808  2.537029   
#[Out]# 99997  1.942065  2.352778  1.104218  1.777017  2.159435  1.715014  2.424385   
#[Out]# 99998  2.681177  0.958664  2.867072  1.127300  1.277971  1.268119  1.756763   
#[Out]# 99999  2.300429  2.501596  2.385804  1.518952  2.691974  2.580092  2.047616   
#[Out]# 
#[Out]#              7         8         9     ...           90        91        92  \
#[Out]# 0      1.993636  3.384643  1.851474    ...     1.405156  1.972001  3.018147   
#[Out]# 1      2.551356  1.446013  1.150052    ...     1.295991  1.298014  2.191522   
#[Out]# 2      2.373529  1.092988  1.932929    ...     1.857067  2.436111  2.279347   
#[Out]# 3      2.543273  1.985104  1.664177    ...     2.248197  2.597650  1.624677   
#[Out]# 4      0.842213  3.165272  1.333032    ...     2.001123  2.899136  1.595563   
#[Out]# 5      2.324688  2.438428  1.781407    ...     1.157299  2.559414  0.801015   
#[Out]# 6      1.910861  2.120342  1.817153    ...     1.377561  0.998171  2.314678   
#[Out]# 7      2.625092  1.846446  1.119391    ...     2.031164  1.444658  2.145769   
#[Out]# 8      1.832822  2.275828  2.170450    ...     1.814867  3.009457  3.405309   
#[Out]# 9      1.925706  1.636896  1.866250    ...     2.514131  2.116830  1.848514   
#[Out]# 10     1.726273  1.780189  2.455611    ...     2.379638  2.081663  2.272032   
#[Out]# 11     3.017800  2.863790  1.351149    ...     1.542789  1.252285  2.391651   
#[Out]# 12     1.346744  1.756410  2.194557    ...     1.395396  1.640794  1.848954   
#[Out]# 13     2.330209  2.066688  1.745909    ...     2.500216  1.546899  1.701546   
#[Out]# 14     2.928066  2.542520  2.113270    ...     1.572091  1.660635  2.046140   
#[Out]# 15     2.089824  1.460171  2.439756    ...     2.868694  3.323866  2.328474   
#[Out]# 16     1.730160  1.615390  2.575856    ...     1.814866  1.841488  1.905132   
#[Out]# 17     1.585083  1.612419  2.711087    ...     1.217383  2.027409  1.761369   
#[Out]# 18     0.983190  1.051478  1.196027    ...     1.285075  1.734414  1.062750   
#[Out]# 19     2.472893  1.981402  1.978065    ...     1.126233  2.578675  1.874941   
#[Out]# 20     3.288274  2.289533  2.097798    ...     1.742349  1.792633  1.772443   
#[Out]# 21     3.322025  0.786464  2.741651    ...     2.117229  2.903842  2.262158   
#[Out]# 22     2.912748  1.373777  2.014147    ...     2.161265  0.826687  1.305829   
#[Out]# 23     1.542011  2.044279  2.275983    ...     1.295104  1.673682  2.077875   
#[Out]# 24     1.290601  2.348601  1.860723    ...     1.096785  1.323375  1.258478   
#[Out]# 25     1.988959  1.671620  2.343626    ...     1.585463  2.106450  2.200665   
#[Out]# 26     0.946796  2.635934  1.156814    ...     2.567562  1.688154  0.826145   
#[Out]# 27     1.786168  0.549221  1.739578    ...     1.812865  2.199998  1.636548   
#[Out]# 28     2.186867  2.366480  2.712085    ...     2.083917  3.235981  1.736450   
#[Out]# 29     1.327618  1.295122  1.871042    ...     1.792426  2.494779  2.022854   
#[Out]# ...         ...       ...       ...    ...          ...       ...       ...   
#[Out]# 99970  2.113457  1.372958  1.402561    ...     1.382721  2.340632  2.418351   
#[Out]# 99971  1.137339  2.138794  0.516597    ...     2.205422  2.956334  1.424770   
#[Out]# 99972  2.123200  1.461488  3.039809    ...     2.189689  1.524174  1.882610   
#[Out]# 99973  1.463132  1.683868  1.839145    ...     1.706165  2.861304  2.301795   
#[Out]# 99974  2.006566  1.589196  2.067332    ...     2.083474  2.680428  2.995183   
#[Out]# 99975  2.064809  1.853981  2.233201    ...     1.972404  1.396330  2.532544   
#[Out]# 99976  1.323467  1.942649  2.662032    ...     2.190299  1.545649  2.233127   
#[Out]# 99977  1.108300  3.196995  2.023229    ...     1.196491  1.873896  2.010153   
#[Out]# 99978  1.365817  1.597979  1.261453    ...     1.536278  2.186786  0.516044   
#[Out]# 99979  2.133136  2.282194  2.359468    ...     2.326690  1.667339  2.074171   
#[Out]# 99980  1.916954  2.025186  1.475500    ...     2.916962  1.740092  0.369208   
#[Out]# 99981  1.927764  2.983409  0.855689    ...     1.499209  1.936219  2.904712   
#[Out]# 99982  1.486922  2.106040  1.935764    ...     2.247181  1.660603  2.254615   
#[Out]# 99983  1.385935  1.283685  2.783633    ...     2.506881  3.081882  1.972034   
#[Out]# 99984  1.594432  1.290186  1.505811    ...     2.300081  1.649063  1.204388   
#[Out]# 99985  2.061906  2.448822  1.716538    ...     2.026350  2.203301  1.236588   
#[Out]# 99986  1.560148  2.245819  2.600717    ...     2.498680  2.222970  1.654151   
#[Out]# 99987  2.418902  1.863137  3.211870    ...     1.943418  2.135067  1.980941   
#[Out]# 99988  1.445377  1.515096  1.765245    ...     2.023479  1.376962  1.871190   
#[Out]# 99989  1.467336  1.414681  1.186079    ...     1.487859  2.695931  1.823389   
#[Out]# 99990  2.088947  2.471298  1.847874    ...     1.971181  1.487837  1.367118   
#[Out]# 99991  1.448154  1.496346  2.361908    ...     1.815644  1.415418  2.502511   
#[Out]# 99992  2.366182  1.695228  2.897846    ...     1.450119  3.018549  2.183167   
#[Out]# 99993  1.592654  1.541313  1.732518    ...     1.692508  2.342566  1.436563   
#[Out]# 99994  2.681383  2.981290  2.787367    ...     2.490115  2.031337  2.746501   
#[Out]# 99995  1.347874  2.406432  2.045719    ...     2.156290  1.469662  1.239475   
#[Out]# 99996  2.572771  1.855158  1.570820    ...     1.528213  1.484577  1.659783   
#[Out]# 99997  2.013074  1.637694  3.488990    ...     2.159156  2.096489  1.486934   
#[Out]# 99998  2.250528  1.326825  2.479023    ...     1.608354  2.040729  2.223907   
#[Out]# 99999  1.384078  1.879208  1.342491    ...     1.807613  1.410310  2.396323   
#[Out]# 
#[Out]#              93        94        95        96        97        98        99  
#[Out]# 0      2.220360  3.010689  1.747911  2.386533  1.733311  1.431434  1.987172  
#[Out]# 1      1.514702  1.013891  2.682375  2.355956  1.905342  2.432560  1.438647  
#[Out]# 2      2.240607  2.450652  1.527546  2.098585  1.540268  1.685716  1.544752  
#[Out]# 3      1.896175  1.075806  2.305705  3.019780  1.157161  3.050878  2.029253  
#[Out]# 4      2.134547  2.112748  2.100429  2.224902  0.643061  2.949058  3.143277  
#[Out]# 5      1.965303  2.642901  1.984894  2.829832  0.389572  1.558335  1.056066  
#[Out]# 6      2.091576  2.251880  2.556874  1.599663  1.599870  1.654136  2.321083  
#[Out]# 7      1.736351  1.195094  1.745555  2.303146  1.254152  1.908617  1.917989  
#[Out]# 8      1.619064  2.217507  1.146233  2.379295  2.301173  1.770566  2.384656  
#[Out]# 9      2.432347  1.275528  1.131998  2.870750  1.874162  2.033666  2.138631  
#[Out]# 10     3.043300  2.100510  1.625051  0.725707  1.696533  2.345716  1.782420  
#[Out]# 11     1.687003  1.811960  2.384660  2.305491  3.423160  2.052245  0.763932  
#[Out]# 12     2.109898  2.977253  1.023336  1.626183  1.430499  3.237348  1.716017  
#[Out]# 13     2.630685  2.047993  3.216496  2.201913  1.283512  2.668225  2.728418  
#[Out]# 14     2.732769  2.355748  2.154696  2.479858  2.117175  1.173931  2.091919  
#[Out]# 15     2.205978  1.154057  2.221118  1.843158  2.165919  1.274724  1.595428  
#[Out]# 16     2.036195  1.655814  1.090724  0.769067  1.330695  2.175078  3.225375  
#[Out]# 17     2.759749  1.505929  2.081585  1.585609  2.050830  2.096098  1.461890  
#[Out]# 18     1.383288  1.662243  2.507893  2.376203  2.115969  1.550455  1.943637  
#[Out]# 19     0.669410  3.152788  2.474398  2.219984  2.352224  1.270148  1.656823  
#[Out]# 20     1.601414  1.199044  2.518716  1.520656  1.306916  2.092927  1.955126  
#[Out]# 21     2.129186  0.730624  1.916472  1.104522  2.289814  1.626387  2.982586  
#[Out]# 22     2.098494  1.901161  1.071817  1.200332  1.396776  0.895496  1.966372  
#[Out]# 23     0.961157  2.589515  2.662890  1.129586  0.845864  2.041472  2.622523  
#[Out]# 24     1.846658  2.267135  1.923982  2.101290  2.576447  1.958138  1.512029  
#[Out]# 25     2.417397  2.438156  1.524865  1.350516  1.549921  1.880187  1.047648  
#[Out]# 26     2.697065  2.435885  2.097123  2.884895  2.738346  2.493706  2.208603  
#[Out]# 27     1.610453  2.330377  2.283877  1.400488  1.861725  2.838918  1.101202  
#[Out]# 28     2.371403  1.440608  2.802317  2.101925  1.619235  2.072106  1.214266  
#[Out]# 29     0.676690  1.143430  2.886865  1.640658  1.877204  1.895740  1.988795  
#[Out]# ...         ...       ...       ...       ...       ...       ...       ...  
#[Out]# 99970  1.974583  2.328737  2.764842  2.032175  1.255271  0.965864  1.552767  
#[Out]# 99971  1.908577  1.695521  2.284933  1.533750  1.747455  2.439444  2.111675  
#[Out]# 99972  1.998752  1.967850  1.285238  2.188817  2.054732  2.816292  1.693329  
#[Out]# 99973  1.984522  2.025310  1.997721  2.356896  1.587012  2.058481  2.186342  
#[Out]# 99974  3.174656  2.581464  1.498646  1.916825  1.668433  1.846584  1.845606  
#[Out]# 99975  1.273616  1.854553  2.392966  2.223151  2.642585  1.589090  1.952765  
#[Out]# 99976  2.575085  2.258446  3.076366  1.611149  1.985844  2.534271  1.334893  
#[Out]# 99977  2.053104  2.770497  2.815749  2.540334  0.830537  2.257850  1.339561  
#[Out]# 99978  3.233332  2.567771  2.305927  2.640347  2.516617  1.935197  1.714070  
#[Out]# 99979  1.914721  1.990047  1.785399  1.687230  1.431270  1.624879  1.731222  
#[Out]# 99980  2.676261  2.499222  1.918852  1.643411  1.265980  1.872594  2.235704  
#[Out]# 99981  1.272503  1.934206  2.178201  1.935533  3.104901  2.042591  1.752550  
#[Out]# 99982  2.621480  1.659217  2.110938  2.470022  2.359924  2.968647  2.098067  
#[Out]# 99983  0.475876  2.575435  2.133713  2.867264  1.732730  1.831861  1.354536  
#[Out]# 99984  2.055990  1.116673  2.241748  2.780365  2.461974  0.715167  3.354131  
#[Out]# 99985  2.330305  1.332705  1.531133  1.363433  1.734751  1.273995  1.556117  
#[Out]# 99986  1.924431  1.993898  1.859339  1.969085  1.886730  1.988250  2.180722  
#[Out]# 99987  0.857108  1.205516  2.125668  3.105553  2.926618  1.177321  1.494216  
#[Out]# 99988  1.486913  1.604741  2.387040  2.046426  1.776867  1.886274  1.522961  
#[Out]# 99989  1.535950  2.533355  2.233974  1.912686  1.606012  1.677495  1.090460  
#[Out]# 99990  2.259710  1.626144  2.347477  1.955410  2.579857  2.166550  1.076714  
#[Out]# 99991  1.258487  1.298193  1.860182  1.399211  1.740669  1.970275  3.057675  
#[Out]# 99992  3.045669  2.331310  1.836002  0.933360  2.926402  2.469891  1.050197  
#[Out]# 99993  1.915419  2.581210  1.512724  2.344805  1.516592  2.384758  2.328794  
#[Out]# 99994  2.616511  2.522149  2.024377  2.596863  2.309965  2.550649  2.547372  
#[Out]# 99995  2.085855  1.546402  2.670792  0.801108  1.924963  1.309836  2.598576  
#[Out]# 99996  1.798531  1.920396  3.043902  1.965024  1.725764  1.465961  1.805480  
#[Out]# 99997  2.669343  2.069421  1.332025  2.191244  2.179376  1.816149  1.682464  
#[Out]# 99998  3.272577  1.933145  2.578746  1.132848  1.919029  2.201389  1.950606  
#[Out]# 99999  1.458223  3.108393  1.609983  1.459910  2.062004  1.693840  1.758297  
#[Out]# 
#[Out]# [100000 rows x 100 columns]
get_ipython().run_line_magic('timeit', "pd.eval('df1+df2+df3+df4')")
get_ipython().run_line_magic('timeit', 'df1+df2+df3+df4')
np.allclose(df1+df2+df3+df4,pd.eval('df1+df2+df3+df4'))
#[Out]# True
df1,df2,df3,df4,df5 = (pd.DataFrame(rng.randint(0,1000,(100,100) for i in range(5))))
df1,df2,df3,df4,df5 = (pd.DataFrame(rng.randint(0,1000,(100,100)) for i in range(5)))
pd.DataFrame(rng.randint(0,1000),(100,100))
pd.DataFrame(rng.randint(0,1000),(100,for i in range(5)))
pd.DataFrame(rng.randint(0,1000),(100,for i in range(5)))Returns True if two arrays are element-wise equal within a toleranceReturns True if two arrays are element-wise equal within a toleranceReturns True if two arrays are element-wise equal within a toleranceReturns True if two arrays are element-wise equal within a toleranceReturns True if two arrays are element-wise equal within a toleranceReturns True if two arrays are element-wise equal within a toleranceReturns True if two arrays are element-wise equal within a toleranceReturns True if two arrays are element-wise equal within a toleranceReturns True if two arrays are element-wise equal within a tolerance
pd.DataFrame(rng.randint(0,1000) for i in range(5))
#[Out]#      0
#[Out]# 0  698
#[Out]# 1  365
#[Out]# 2  616
#[Out]# 3  460
#[Out]# 4  497
df1,df2,df3,df4,df5 = pd.DataFrame(rng.randint(0,1000) for i in range(5))
pd.DataFrame(rng.randint(0,1000,(100,100)) for i in range(5))
pd.DataFrame(rng.randint(0,1000,(100,10)) for i in range(5))
pd.DataFrame(rng.randint(0,1000,(100,10)))
#[Out]#       0    1    2    3    4    5    6    7    8    9
#[Out]# 0   216  781  209  760  885  516  818  184  488  432
#[Out]# 1    30  644  180  494  132  670  320  463  264  475
#[Out]# 2   564  580  977  157  840  264  941  416  130  453
#[Out]# 3   232  402  738  536  704  762  192  627  223   70
#[Out]# 4   228   70  347  514  743  823  892   47  619  966
#[Out]# 5   676   37   99  985  657  550   74  356   84  370
#[Out]# 6   581  886  533  466  436  879  554  779  651   92
#[Out]# 7   364  705  735  186  358  403  589  525  867  221
#[Out]# 8   701  453  662  733  539  351  866  344  139  987
#[Out]# 9   817  188  317  845  233  178  629  127  730  237
#[Out]# 10  536  251  441  430  600  314  778  939  379  506
#[Out]# 11  355  943  255  214  873  366   81  573  645  559
#[Out]# 12  746   58  131  634  527  202  678  696  920  892
#[Out]# 13   44  721   22  810  678  797  323  734  280  873
#[Out]# 14  223  348  500  356   47  579  574   28  676  599
#[Out]# 15  799  549  471  536  355  597  427  214  760  540
#[Out]# 16  602  498  389  355  381   91  562   28  295  796
#[Out]# 17  155  327  599  184  576  105  781  505  327  991
#[Out]# 18  400  290  871  739  415  884  785  105  965  385
#[Out]# 19  673  628  914  152  632  285  109  221  181  367
#[Out]# 20  318  931  299   62  976   40  345   70  318  458
#[Out]# 21  918   50  275   45  657  412  869   47   74  694
#[Out]# 22  645  159  208  680  807  268  582  166  169  963
#[Out]# 23  117   95  413  738  398  169  187  963  754  981
#[Out]# 24  130  936  856  153  894  472  474  696  132  901
#[Out]# 25  609  487  791  913  639  220  367  933  562  907
#[Out]# 26  438  675  875  515  398  408  953  284  528  512
#[Out]# 27  989   17  595  873  881  265  697  292  905  776
#[Out]# 28   38   56  488  235  513  601  127   88   82  647
#[Out]# 29  399  850  625  580  316  713  365   36  978  468
#[Out]# ..  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...
#[Out]# 70   50  543  930  170  466  771  467  111  490  745
#[Out]# 71  682   15  825  221  450  108  628  956  832  494
#[Out]# 72  236  257  630  920  748  915  100  593  139  692
#[Out]# 73   14  865  304  708  132  945  717  323   37  748
#[Out]# 74   91  113  408  610  753  762  644  589  474   81
#[Out]# 75  130  553  491  397   45  568  799  229  960  469
#[Out]# 76  779  397   58   56   64  905    1  944  920  223
#[Out]# 77  192  124  377  910  557   92  807  281  992  215
#[Out]# 78  118  436   69  738  307  216  368  986  533  861
#[Out]# 79  193  211  916  882  845   71  472  784  362  402
#[Out]# 80  641  645  719  945  630  939  771  104  402  406
#[Out]# 81  946  129  459   98  843  484  111  108  587  871
#[Out]# 82  701  858  287  944  647  771  665  856  243  254
#[Out]# 83  942  342  946  337  470  600  603   62   78  530
#[Out]# 84  648  646  439  894  150  197  588  471  351  593
#[Out]# 85  312   77  376   87  356  190  711  343  785   78
#[Out]# 86  203  862  182  675  311  996   26  814  524  588
#[Out]# 87   99  635  777  830   99  194   74  493  729  144
#[Out]# 88  202  187  233  613  322  953  442  714  848  440
#[Out]# 89  826   11  302  559  373  981   93   50  754  101
#[Out]# 90  746  407  901  381  886  797  303  925    5  390
#[Out]# 91  948  765  598  397  993  209  451  378  657  216
#[Out]# 92  604  661  578  676    2  884  139   87  414  343
#[Out]# 93  143  849  562  848  190  312  903  787  772  970
#[Out]# 94   72  770  922  140  169  690  548  858  735  855
#[Out]# 95  891   23  788  239  530  717  970  866  229  197
#[Out]# 96   64  628  763  477  743  783  469  461  594  921
#[Out]# 97  265  602  341  413  340  251  390  724  379  111
#[Out]# 98  899  130  385  331  242  369   15  987  884  187
#[Out]# 99  713  595  186  241  598  693  791  701  687  218
#[Out]# 
#[Out]# [100 rows x 10 columns]
pd.DataFrame(rng.randint(0,1000,(100,10)) for i range(5))
pd.DataFrame(rng.randint(0,1000,(100,10)) for i in range(5))
pd.DataFrame(rng.randint(0,1000,(100,10)))
#[Out]#       0    1    2    3    4    5    6    7    8    9
#[Out]# 0   936  625  759    9  869  968  702  851  770  403
#[Out]# 1   995   37  775  400  995  596  120  328  506  919
#[Out]# 2   330  552  580  544  579  999  444  460  592  407
#[Out]# 3   407  528  541  333  698  628  778  338  555  539
#[Out]# 4   437  905  354  588  496  536   38  900  502  268
#[Out]# 5   387  182  447  244  660  763  624  754  938  619
#[Out]# 6   337  485  993   76  140   29  605  771  569  585
#[Out]# 7   893  957  345  972    8  124  663  731  798  884
#[Out]# 8    74  619  894  134  675  608  429  295  836  411
#[Out]# 9   501  940  804  830  144  746  213  110  931  795
#[Out]# 10  172  918  272  147   24  751  948  356  457  883
#[Out]# 11  181  940  965  714  444  992  954  236  345  643
#[Out]# 12  349  969  954  266   76  244  834  817  739  660
#[Out]# 13  152  807  675  150  928  318  494  499  342  901
#[Out]# 14   44  518  800  611   21  572   66  784  928  802
#[Out]# 15  791  358   31  106   48  266  770  209  498  907
#[Out]# 16  577   85  838  169  113  871   29  166  135  845
#[Out]# 17   22  859  897  288  291  225  923  560  733  777
#[Out]# 18  910  836  212  223  832  924  578  832  378   75
#[Out]# 19  459  418  937  509  562   94  851  497   55  847
#[Out]# 20   58   30  406  252  200  977  496  370  427  638
#[Out]# 21  270  654  476  735  341  703  167   53  748  870
#[Out]# 22  460   85  811  278   68  418  475  984  194  440
#[Out]# 23  623    0   40  767  799  642  327  153  130  216
#[Out]# 24  638  264  622  393  767  765  214  391  409  103
#[Out]# 25  146  395  102  526  495  849  501  354  804  470
#[Out]# 26  427  751   81   13  467  375  509  688  580  404
#[Out]# 27  820   23  966  198  794  520  746  531  353  660
#[Out]# 28  549  111  830  548  248  760  816  256   53  834
#[Out]# 29  836  415  808  526  874  615  346  318  196  131
#[Out]# ..  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...
#[Out]# 70  784  506  493  550  161  412  644  256  665  358
#[Out]# 71   86  586  703  542  545  119  704  748  671  681
#[Out]# 72  841  998  574  490  906  599  193  201   70  972
#[Out]# 73  967  262  737  913   87  604  897  391  231  708
#[Out]# 74  463  903  509  444  721  475  569  201  543  710
#[Out]# 75  347  301  628  405  171  852  721  723  299  423
#[Out]# 76  457    8  164   35  413   69  136  104  852  847
#[Out]# 77   57  493  409  660  237  859   25  613   79  341
#[Out]# 78  617  359  705  878   92   70  417  491  971  427
#[Out]# 79  935  678  471  753  818  887  161  995  604  273
#[Out]# 80  756  529   46  824    3  991  416  429  890  858
#[Out]# 81  584  980  462  167  189  960    5  145  608  493
#[Out]# 82  291  462  795  714  315  996  622  181  771    8
#[Out]# 83  130  204   67  545  115  716  806  552   21  298
#[Out]# 84  811  341   83  149  849  312  141  347  160   10
#[Out]# 85  835  638  291   91  329  453  870  446  392  840
#[Out]# 86  164  344  941  126  962  475  250   97  454  852
#[Out]# 87  620  161   90  863   14  906  417  517  706  811
#[Out]# 88  739  366  650  935   97  748  766  356  730  733
#[Out]# 89  442  506  770  498  527  556  689  699  104  486
#[Out]# 90  704  785  995  852  899   52  123    0  906  599
#[Out]# 91  542  814  399  887  103  474  408  544  370  789
#[Out]# 92  191  252  249  334  650  790  797  281  658  649
#[Out]# 93  265  700  895  349  246  927  828  212  738  669
#[Out]# 94  315   80  197  234  850  837   76   83  346  847
#[Out]# 95  459   21  587  531  505  715  193  853  670  179
#[Out]# 96  823   20  658  821  259    5  864  408  109  863
#[Out]# 97   97  114  366  559  893  946   22  606  263  249
#[Out]# 98  987  539  196  608  592  927  860   68  120  445
#[Out]# 99  265  287  380  262  474  540  561  779  978  370
#[Out]# 
#[Out]# [100 rows x 10 columns]
df1 = pd.DataFrame(rng.randint(0,1000,(100,10)))
df2 = pd.DataFrame(rng.randint(0,1000,(100,10)))
df3 = pd.DataFrame(rng.randint(0,1000,(100,10)))
df4 = pd.DataFrame(rng.randint(0,1000,(100,10)))
df5 = pd.DataFrame(rng.randint(0,1000,(100,10)))
np.allclose(df1,df2)
#[Out]# False
result1 = -df1 * df2 /(df3+df4) - df5
result2 = pd.eval('-df1 *df2 / (df3 + df4)-df5')
np.allclose(result1,result2)
#[Out]# True
result1 = (df1 < df2) & (df2 <= df3) & (df3 != df4)
result2 = pd.eval('df1<df2<=df3!=df4')
np.allclose(result1,result2)
#[Out]# True
r1 = df2.T[0] + df3.iloc[1]
r2 = pd.eval('df2.T[0] + df3.iloc[1]')
np.allclose(r1,r2)
#[Out]# True
df = pd.DataFrame(rng.rand(1000,3),columns=['A','B','C'])
df.head()
#[Out]#           A         B         C
#[Out]# 0  0.380862  0.225114  0.843092
#[Out]# 1  0.190446  0.968952  0.221680
#[Out]# 2  0.310997  0.216461  0.228338
#[Out]# 3  0.885909  0.390796  0.899333
#[Out]# 4  0.462221  0.038152  0.411222
r3 = df.eval('(A+B)/(C-1)')
np.allclose(result1,r3)
np.allclose(r1,r3)
r1
#[Out]# 0     232
#[Out]# 1     685
#[Out]# 2     910
#[Out]# 3     711
#[Out]# 4     954
#[Out]# 5     808
#[Out]# 6     717
#[Out]# 7     653
#[Out]# 8    1610
#[Out]# 9    1072
#[Out]# dtype: int32
r2
#[Out]# 0     232
#[Out]# 1     685
#[Out]# 2     910
#[Out]# 3     711
#[Out]# 4     954
#[Out]# 5     808
#[Out]# 6     717
#[Out]# 7     653
#[Out]# 8    1610
#[Out]# 9    1072
#[Out]# dtype: int32
r3
#[Out]# 0      -3.861984
#[Out]# 1      -1.489617
#[Out]# 2      -0.683536
#[Out]# 3     -12.682460
#[Out]# 4      -0.849850
#[Out]# 5      -0.733805
#[Out]# 6      -1.076392
#[Out]# 7     -37.146491
#[Out]# 8      -2.048114
#[Out]# 9      -0.939089
#[Out]# 10     -2.356781
#[Out]# 11     -0.542582
#[Out]# 12     -1.835356
#[Out]# 13     -1.404856
#[Out]# 14     -0.934624
#[Out]# 15     -1.532241
#[Out]# 16     -1.064704
#[Out]# 17     -2.978590
#[Out]# 18     -2.206880
#[Out]# 19     -0.573035
#[Out]# 20     -3.415253
#[Out]# 21     -3.452734
#[Out]# 22    -49.171082
#[Out]# 23     -2.615080
#[Out]# 24     -2.284409
#[Out]# 25     -2.352862
#[Out]# 26     -0.512884
#[Out]# 27     -0.853905
#[Out]# 28    -10.682876
#[Out]# 29     -4.832468
#[Out]#          ...    
#[Out]# 970    -3.018680
#[Out]# 971    -1.256964
#[Out]# 972    -0.036127
#[Out]# 973    -2.074459
#[Out]# 974    -2.293090
#[Out]# 975    -3.765345
#[Out]# 976    -7.201105
#[Out]# 977    -2.511774
#[Out]# 978    -7.731668
#[Out]# 979    -1.600527
#[Out]# 980    -2.368070
#[Out]# 981    -2.061246
#[Out]# 982    -3.300117
#[Out]# 983    -2.295291
#[Out]# 984   -14.403425
#[Out]# 985    -0.606625
#[Out]# 986    -3.276031
#[Out]# 987    -1.724541
#[Out]# 988    -9.791347
#[Out]# 989    -0.390858
#[Out]# 990    -1.829383
#[Out]# 991   -40.904626
#[Out]# 992    -1.476600
#[Out]# 993    -0.615787
#[Out]# 994    -4.210727
#[Out]# 995    -3.679263
#[Out]# 996    -0.869608
#[Out]# 997    -1.105661
#[Out]# 998    -6.807552
#[Out]# 999    -0.509505
#[Out]# Length: 1000, dtype: float64
r4
np.allclose(r1,r3)
r1.shape
#[Out]# (10,)
r3.shape
#[Out]# (1000,)
df.head()
#[Out]#           A         B         C
#[Out]# 0  0.380862  0.225114  0.843092
#[Out]# 1  0.190446  0.968952  0.221680
#[Out]# 2  0.310997  0.216461  0.228338
#[Out]# 3  0.885909  0.390796  0.899333
#[Out]# 4  0.462221  0.038152  0.411222
df.eval('D=(A+B)/C',inplace=True)
df.head()
#[Out]#           A         B         C         D
#[Out]# 0  0.380862  0.225114  0.843092  0.718755
#[Out]# 1  0.190446  0.968952  0.221680  5.230047
#[Out]# 2  0.310997  0.216461  0.228338  2.309991
#[Out]# 3  0.885909  0.390796  0.899333  1.419614
#[Out]# 4  0.462221  0.038152  0.411222  1.216796
df.eval('D=(A-B)/C',inplace=True)
df.head()
#[Out]#           A         B         C         D
#[Out]# 0  0.380862  0.225114  0.843092  0.184734
#[Out]# 1  0.190446  0.968952  0.221680 -3.511842
#[Out]# 2  0.310997  0.216461  0.228338  0.414018
#[Out]# 3  0.885909  0.390796  0.899333  0.550534
#[Out]# 4  0.462221  0.038152  0.411222  1.031239
r1 = df[(df.A < 0.5) & (df.B < 0.5)]
r2 = pd.eval('df[(df.A < 0.5) & (df.B < 0.5)]")
r2 = pd.eval('df[(df.A < 0.5) & (df.B < 0.5)]')
np.allclose(r1,r2)
#[Out]# True
r2 = df.query('A < 0.5 and B < 0.5')
np.allclose(r1,r2)
#[Out]# True
cmean = df['C'].mean()
r1 = df[(df.A < cmean) & (df.B < cmean)]
r2 = df.query('A < @cmean and B < @cmean')
np.allclose(r1,r2)
#[Out]# True
df.values.nbytes
#[Out]# 32000
get_ipython().run_line_magic('logstop', '')
