# -*- coding: UTF-8 -*-
# 回归 2018-09-14
'''
此脚本用于展示如何利用惩罚项解决模型幻觉的问题
'''

import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt
import pandas as pd


def generate_randomvar():
    np.random.seed(4873) #一直没理解seed(number) number不同取值的含义 =0 or !=0
    return np.random.randint(2, size=20)

def train_model(x, y):
    '''
    param x
    param y
    return res 
    '''
    model = sm.OLS(y, x) # 建立模型 类
    res = model.fit() # 正则化的训练不需要训练集？
    return res


def train_regulize_model(x, y, alpha):
    model = sm.OLS(y, x) # 最小化二乘
    # 正则化拟合&权重(Return a regularized fit to a linear regression model)
    res = model.fit_regularized(alpha=alpha)
    return res

def visualize_model(x, y):
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    fig = plt.figure(figsize=(6, 6), dpi=80)
    ax = fig.add_subplot(1, 1, 1)
    alphas = np.logspace(-4, -0.8, 100)  # logspace用于创建等比数列
    coefs = []
    for alpha in alphas:
        res = train_regulize_model(x, y, alpha)
        coefs.append(res.params)
    coefs = np.array(coefs)
    ax.plot(alphas, coefs[:, 1], "r:", label='%s' % "x的参数a")
    ax.plot(alphas, coefs[:, 2], "g", label='%s' % "z的参数b")
    ax.plot(alphas, coefs[:, 0], "b-.", label='%s' % "const的参数c")
    legend = plt.legend(loc=4, shadow=True)
    legend.get_frame().set_facecolor("#6F93AE")
    ax.set_yticks(np.arange(-1, 1.3, 0.3))
    # ax.set_scale 把当前的图形x轴设置为对数坐标
    ax.set_xscale("log")
    ax.set_xlabel("$alpha$")
    plt.show()


def add_reg(data):
    '''
    主函数
    param data pandas类型
    return i
    '''
    features = ['x']
    labels = ['y']
    Y = data[labels]
    _X = data[features] # 过渡
    _X['z'] = generate_randomvar() # 新加一个索引’z'
    X = sm.add_constant(_X) # 添加常熟 y=ax+b 中的 b
    print('加入惩罚项（权重=0.1）的估计结果：\n%s' % train_regulize_model(X, Y, 0.1).params)
    visualize_model(X, Y)

def read_data(file):
    data = pd.read_csv(file)
    return data

if __name__ == "__main__":
    data = read_data('simple_example.csv')
    add_reg(data)
    
'''
####################################
#正则化
import statsmodels.api as sm
Y = [1,3,4,5,2,3,4]
X = range(1,8)
X = sm.add_constant(X)
model = sm.OLS(Y,X)
results = model.fit()
results.params
array([ 2.14285714,  0.25      ])
>>>results.tvalues
array([ 1.87867287,  0.98019606])
>>>print(results.t_test([1, 0]))
<T test: effect=array([ 2.14285714]), sd=array([[ 1.14062282]]), t=array([[ 1.87867287]]), p=array([[ 0.05953974]]), df_denom=5>
>>>print(results.f_test(np.identity(2)))
<F test: F=array([[ 19.46078431]]), p=[[ 0.00437251]], df_denom=5, df_num=2>
"""