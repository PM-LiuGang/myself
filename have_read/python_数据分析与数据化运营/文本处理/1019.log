# IPython log file

runfile('C:/Users/Administrator/Desktop/myself/刷过的书/python_数据分析与数据化运营/文本处理/4-9-1.py', wdir='C:/Users/Administrator/Desktop/myself/刷过的书/python_数据分析与数据化运营/文本处理')
get_ipython().run_line_magic('pwd', '')
#[Out]# 'C:\\Users\\Administrator\\Desktop\\myself\\刷过的书\\python_数据分析与数据化运营\\文本处理'
get_ipython().run_line_magic('cd', '..')
get_ipython().run_line_magic('pwd', '')
#[Out]# 'C:\\Users\\Administrator\\Desktop\\myself\\刷过的书\\python_数据分析与数据化运营'
get_ipython().run_line_magic('cd', '..')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('cd', 'python_数据分析与挖掘实战/')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('cd', '财政收入影响因素分析及预测模型/')
get_ipython().run_line_magic('ls', '')
import pandas as pd
data = pd.DataFrame('data1.csv')
get_ipython().run_line_magic('ls', '')
data = pd.read_csv('data1.csv')
data.head()
#[Out]#         x1      x2      x3        x4   ...      x11    x12   x13       y
#[Out]# 0  3831732  181.54  448.19   7571.00   ...    120.0  1.029  5321   64.87
#[Out]# 1  3913824  214.63  549.97   9038.16   ...    113.5  1.051  6529   99.75
#[Out]# 2  3928907  239.56  686.44   9905.31   ...    108.2  1.064  7008   88.11
#[Out]# 3  4282130  261.58  802.59  10444.60   ...    102.2  1.092  7694  106.07
#[Out]# 4  4453911  283.14  904.57  11255.70   ...     97.7  1.200  8027  137.32
#[Out]# 
#[Out]# [5 rows x 14 columns]
r = [data.min(),data.max(),data.mean(),data.std()]
r = pd.DataFrame(r,index=['Min','Max','Mean','Std']).T
r.head
#[Out]# <bound method NDFrame.head of              Min          Max          Mean           Std
#[Out]# x1   3831732.000  7599295.000  5.579520e+06  1.262195e+06
#[Out]# x2       181.540     2110.780  7.650350e+02  5.956983e+02
#[Out]# x3       448.190     6882.850  2.370825e+03  1.919167e+03
#[Out]# x4      7571.000    42049.140  1.964469e+04  1.020302e+04
#[Out]# x5      6212.700    33156.830  1.587095e+04  8.199771e+03
#[Out]# x6   6370241.000  8323096.000  7.350514e+06  6.213419e+05
#[Out]# x7       525.710     4454.550  1.712239e+03  1.184714e+03
#[Out]# x8       985.310    15420.140  5.705799e+03  4.478400e+03
#[Out]# x9        60.620      228.460  1.294935e+02  5.050983e+01
#[Out]# x10       65.660      852.560  3.402165e+02  2.515779e+02
#[Out]# x11       97.500      120.000  1.033050e+02  5.513283e+00
#[Out]# x12        1.029        1.906  1.422200e+00  2.532348e-01
#[Out]# x13     5321.000    41972.000  1.727380e+04  1.110919e+04
#[Out]# y         64.870     2088.140  6.180840e+02  6.092545e+02>
r.head()
#[Out]#            Min         Max         Mean           Std
#[Out]# x1  3831732.00  7599295.00  5579519.950  1.262195e+06
#[Out]# x2      181.54     2110.78      765.035  5.956983e+02
#[Out]# x3      448.19     6882.85     2370.825  1.919167e+03
#[Out]# x4     7571.00    42049.14    19644.685  1.020302e+04
#[Out]# x5     6212.70    33156.83    15870.948  8.199771e+03
result = np.round(r,2)
reusult.head()
result.head()
#[Out]#            Min         Max        Mean         Std
#[Out]# x1  3831732.00  7599295.00  5579519.95  1262194.72
#[Out]# x2      181.54     2110.78      765.04      595.70
#[Out]# x3      448.19     6882.85     2370.83     1919.17
#[Out]# x4     7571.00    42049.14    19644.69    10203.02
#[Out]# x5     6212.70    33156.83    15870.95     8199.77
result1 = np.round(data,corr(method='pearson').2)
result1 = np.round(data,corr(method='pearson'),2)
result1 = np.round(data.corr(method='pearson'),2)
result1.head()
#[Out]#       x1    x2    x3    x4    x5    x6  ...     x9   x10   x11   x12   x13     y
#[Out]# x1  1.00  0.95  0.95  0.97  0.97  0.99  ...   0.98  0.98 -0.29  0.94  0.96  0.94
#[Out]# x2  0.95  1.00  1.00  0.99  0.99  0.92  ...   0.98  0.98 -0.13  0.89  1.00  0.98
#[Out]# x3  0.95  1.00  1.00  0.99  0.99  0.92  ...   0.98  0.99 -0.15  0.89  1.00  0.99
#[Out]# x4  0.97  0.99  0.99  1.00  1.00  0.95  ...   0.99  1.00 -0.19  0.91  1.00  0.99
#[Out]# x5  0.97  0.99  0.99  1.00  1.00  0.95  ...   0.99  1.00 -0.18  0.90  0.99  0.99
#[Out]# 
#[Out]# [5 rows x 14 columns]
from sklearn.linear_model import Lasso
model = Lasso(alpha=0.1)
model.fit(data.iloc[:,:13],data['y'])
#[Out]# Lasso(alpha=0.1, copy_X=True, fit_intercept=True, max_iter=1000,
#[Out]#    normalize=False, positive=False, precompute=False, random_state=None,
#[Out]#    selection='cyclic', tol=0.0001, warm_start=False)
print(model.coef_)
print(mode.intercept_)
print(model.intercept_)
coef1 = model.coef_
len(coef1)
#[Out]# 13
coef1.shape
#[Out]# (13,)
intercept1 = model.intercept_
len(intercept1)
intercept1.shape
#[Out]# ()
model.intercept_
#[Out]# -2650.9958943685506
# Lasso  回归特点在拟合广义线性模型的同时进行变量筛选和复杂度调整
# 灰色预测
# 灰色预测：灰色预测是一种对含有不确定因素的系统进行预测的方法，灰色预测通过鉴别系统因素之间发展趋势的相异程度，即进行关联分析，并对原始数据进行生成处理来寻找系统变动的规律，生成有较强规律性的数据序列，然后建立相应的微分方程模型，从而预测事物未来发展趋势的状况。
# 其用等时距观测到的反应预测对象特征的一系列数量值构造灰色预测模型，预测未来某一时刻的特征量，或达到某一特征量的时间。
# 灰色理论建立的是生成数据模型，不是原始数据模型
# 数据生成方式：A：累加生成：通过数列间各时刻数据的依个累加得到新的数据与数列。累加前数列为原始数列，累加后为生成数列。B：累减生成 C：其他

# 优势：是处理小样本数据预测问题的有效工具

debugfile('C:/Users/Administrator/Desktop/myself/刷过的书/python_数据分析与挖掘实战/财政收入影响因素分析及预测模型/code.py', wdir='C:/Users/Administrator/Desktop/myself/刷过的书/python_数据分析与挖掘实战/财政收入影响因素分析及预测模型')
debugfile('C:/Users/Administrator/Desktop/myself/刷过的书/python_数据分析与挖掘实战/财政收入影响因素分析及预测模型/code.py', wdir='C:/Users/Administrator/Desktop/myself/刷过的书/python_数据分析与挖掘实战/财政收入影响因素分析及预测模型')
debugfile('C:/Users/Administrator/Desktop/myself/刷过的书/python_数据分析与挖掘实战/财政收入影响因素分析及预测模型/code.py', wdir='C:/Users/Administrator/Desktop/myself/刷过的书/python_数据分析与挖掘实战/财政收入影响因素分析及预测模型')
debugfile('C:/Users/Administrator/Desktop/myself/刷过的书/python_数据分析与挖掘实战/财政收入影响因素分析及预测模型/code.py', wdir='C:/Users/Administrator/Desktop/myself/刷过的书/python_数据分析与挖掘实战/财政收入影响因素分析及预测模型')
def GM11(x0):
    import numpy as np
    x1 = x0.cumsum()
    z1 = (x1[:len(x1)-1] + x1[1:])/2.0
    z1 = z1.reshape((len(z1),1))
    B = np.append(-z1,np.ones_like(z1),axis=1)
    Yn = x0[1:].reashape((len(x0)-1,1))
    [[a],[b]] = np.dot(np.dot(np.linalg.inv(np.dot(B.T,B)),B.T),Yn)
    # linalg.inv 矩阵求逆 f 时间反应方程
    f = lambda k: (x1[0]-b/a)*np.exp(-a*(k-1))-(x1[0]-b/a)*np.exp(-a*(k-2))
    delta = np.abs(x0-np.array([f(i) for i in range(1,len(x0)+1)]))
    C = delta.std()/x0.std()
    P = 1.0*(np.abs(delta - delta.mean())< 0.6745 * x0.std()).sum()/len(x0)
    return f,a,b,x0[0],C,P

data.head()
#[Out]#         x1      x2      x3        x4   ...      x11    x12   x13       y
#[Out]# 0  3831732  181.54  448.19   7571.00   ...    120.0  1.029  5321   64.87
#[Out]# 1  3913824  214.63  549.97   9038.16   ...    113.5  1.051  6529   99.75
#[Out]# 2  3928907  239.56  686.44   9905.31   ...    108.2  1.064  7008   88.11
#[Out]# 3  4282130  261.58  802.59  10444.60   ...    102.2  1.092  7694  106.07
#[Out]# 4  4453911  283.14  904.57  11255.70   ...     97.7  1.200  8027  137.32
#[Out]# 
#[Out]# [5 rows x 14 columns]
data.loc[2014] = None
data.loc[2015] = None
h = ['x'+ i for i in range(1,8)]
h = ['x'+ str(i) for i in range(1,8)]
h
#[Out]# ['x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7']
P = []
c = [}
c = []
del c
c
C = []
for i in h:
    gm = GM11(data[i][range(1994,2014)].as_matrix())
    f = gm[0]
    P = gm[-1]
    C = gm[-2]
    data[i][2014] = f(len(data)-1)
    data[i][2015] = f(len(data))
    data[i] = data[i].round(2)    
    if (C < 0.35 and P > 0.95): # 评测后验差判别
        print ('对于模型%s，该模型精度为---好' % i)
    elif (C < 0.5 and P > 0.8):
        print ('对于模型%s，该模型精度为---合格' % i)
    elif (C < 0.65 and P > 0.7):
        print ('对于模型%s，该模型精度为---勉强合格' % i)
    else:
        print ('对于模型%s，该模型精度为---不合格' % i)
        
data[i]
#[Out]# 0       3831732.0
#[Out]# 1       3913824.0
#[Out]# 2       3928907.0
#[Out]# 3       4282130.0
#[Out]# 4       4453911.0
#[Out]# 5       4548852.0
#[Out]# 6       4962579.0
#[Out]# 7       5029338.0
#[Out]# 8       5070216.0
#[Out]# 9       5210706.0
#[Out]# 10      5407087.0
#[Out]# 11      5744550.0
#[Out]# 12      5994973.0
#[Out]# 13      6236312.0
#[Out]# 14      6529045.0
#[Out]# 15      6791495.0
#[Out]# 16      7110695.0
#[Out]# 17      7431755.0
#[Out]# 18      7512997.0
#[Out]# 19      7599295.0
#[Out]# 2014          NaN
#[Out]# 2015          NaN
#[Out]# Name: x1, dtype: float64
data[i][range(1994,2014)]
data[i][range(1,12)]
data[i][list(range(1,12))]
#[Out]# 1     3913824.0
#[Out]# 2     3928907.0
#[Out]# 3     4282130.0
#[Out]# 4     4453911.0
#[Out]# 5     4548852.0
#[Out]# 6     4962579.0
#[Out]# 7     5029338.0
#[Out]# 8     5070216.0
#[Out]# 9     5210706.0
#[Out]# 10    5407087.0
#[Out]# 11    5744550.0
#[Out]# Name: x1, dtype: float64
data[i][list(range(1994,2014))]
data.index
#[Out]# Int64Index([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
#[Out]#               11,   12,   13,   14,   15,   16,   17,   18,   19, 2014, 2015],
#[Out]#            dtype='int64')
data.index = list[range(94,2016)]
type(data)
#[Out]# pandas.core.frame.DataFrame
data.index = pd.Index([range(1994,206)])
data.index = pd.Index([range(1994,2016)])
data.index = pd.Index([list(range(1994,2016))])
get_ipython().run_line_magic('pinfo', 'pd.Int64Index')
pd.Index
#[Out]# pandas.core.indexes.base.Index
get_ipython().run_line_magic('pinfo', 'pd.Index')
list(range(1994,2015))
#[Out]# [1994,
#[Out]#  1995,
#[Out]#  1996,
#[Out]#  1997,
#[Out]#  1998,
#[Out]#  1999,
#[Out]#  2000,
#[Out]#  2001,
#[Out]#  2002,
#[Out]#  2003,
#[Out]#  2004,
#[Out]#  2005,
#[Out]#  2006,
#[Out]#  2007,
#[Out]#  2008,
#[Out]#  2009,
#[Out]#  2010,
#[Out]#  2011,
#[Out]#  2012,
#[Out]#  2013,
#[Out]#  2014]
list(range(1994,2015))
#[Out]# [1994,
#[Out]#  1995,
#[Out]#  1996,
#[Out]#  1997,
#[Out]#  1998,
#[Out]#  1999,
#[Out]#  2000,
#[Out]#  2001,
#[Out]#  2002,
#[Out]#  2003,
#[Out]#  2004,
#[Out]#  2005,
#[Out]#  2006,
#[Out]#  2007,
#[Out]#  2008,
#[Out]#  2009,
#[Out]#  2010,
#[Out]#  2011,
#[Out]#  2012,
#[Out]#  2013,
#[Out]#  2014]
data.index = pd.Index([list(range(1994,2016))])
data.shape
#[Out]# (22, 14)
len(range(1994,2016))
#[Out]# 22
data.index = pd.Index([range(1994,2016)])
data.index = pd.Index(range(1994,2016))
data.index
#[Out]# RangeIndex(start=1994, stop=2016, step=1)
for i in h:
    gm = GM11(data[i][range(1994,2014)].as_matrix())
    f = gm[0]
    P = gm[-1]
    C = gm[-2]
    data[i][2014] = f(len(data)-1)
    data[i][2015] = f(len(data))
    data[i] = data[i].round(2)    
    if (C < 0.35 and P > 0.95): # 评测后验差判别
        print ('对于模型%s，该模型精度为---好' % i)
    elif (C < 0.5 and P > 0.8):
        print ('对于模型%s，该模型精度为---合格' % i)
    elif (C < 0.65 and P > 0.7):
        print ('对于模型%s，该模型精度为---勉强合格' % i)
    else:
        print ('对于模型%s，该模型精度为---不合格' % i)
        
for i in h:
    gm = GM11(data[i][list(range(1994,2014))].as_matrix())
    f = gm[0]
    P = gm[-1]
    C = gm[-2]
    data[i][2014] = f(len(data)-1)
    data[i][2015] = f(len(data))
    data[i] = data[i].round(2)    
    if (C < 0.35 and P > 0.95): # 评测后验差判别
        print ('对于模型%s，该模型精度为---好' % i)
    elif (C < 0.5 and P > 0.8):
        print ('对于模型%s，该模型精度为---合格' % i)
    elif (C < 0.65 and P > 0.7):
        print ('对于模型%s，该模型精度为---勉强合格' % i)
    else:
        print ('对于模型%s，该模型精度为---不合格' % i)
        
def GM11(x0):
    import numpy as np
    x1 = x0.cumsum()
    z1 = (x1[:len(x1)-1] + x1[1:])/2.0
    z1 = z1.reshape((len(z1),1))
    B = np.append(-z1,np.ones_like(z1),axis=1)
    Yn = x0[1:].reshape((len(x0)-1,1))
    [[a],[b]] = np.dot(np.dot(np.linalg.inv(np.dot(B.T,B)),B.T),Yn)
    # linalg.inv 矩阵求逆 f 时间反应方程
    f = lambda k: (x1[0]-b/a)*np.exp(-a*(k-1))-(x1[0]-b/a)*np.exp(-a*(k-2))
    delta = np.abs(x0-np.array([f(i) for i in range(1,len(x0)+1)]))
    C = delta.std()/x0.std()
    P = 1.0*(np.abs(delta - delta.mean())< 0.6745 * x0.std()).sum()/len(x0)
    return f,a,b,x0[0],C,P

for i in h:
    gm = GM11(data[i][list(range(1994,2014))].as_matrix())
    f = gm[0]
    P = gm[-1]
    C = gm[-2]
    data[i][2014] = f(len(data)-1)
    data[i][2015] = f(len(data))
    data[i] = data[i].round(2)    
    if (C < 0.35 and P > 0.95): # 评测后验差判别
        print ('对于模型%s，该模型精度为---好' % i)
    elif (C < 0.5 and P > 0.8):
        print ('对于模型%s，该模型精度为---合格' % i)
    elif (C < 0.65 and P > 0.7):
        print ('对于模型%s，该模型精度为---勉强合格' % i)
    else:
        print ('对于模型%s，该模型精度为---不合格' % i)
        
data
#[Out]#               x1       x2       x3   ...       x12      x13        y
#[Out]# 1994  3831732.00   181.54   448.19   ...     1.029   5321.0    64.87
#[Out]# 1995  3913824.00   214.63   549.97   ...     1.051   6529.0    99.75
#[Out]# 1996  3928907.00   239.56   686.44   ...     1.064   7008.0    88.11
#[Out]# 1997  4282130.00   261.58   802.59   ...     1.092   7694.0   106.07
#[Out]# 1998  4453911.00   283.14   904.57   ...     1.200   8027.0   137.32
#[Out]# 1999  4548852.00   308.58  1000.69   ...     1.198   8549.0   188.14
#[Out]# 2000  4962579.00   348.09  1121.13   ...     1.348   9566.0   219.91
#[Out]# 2001  5029338.00   387.81  1248.29   ...     1.467  10473.0   271.91
#[Out]# 2002  5070216.00   453.49  1370.68   ...     1.560  11469.0   269.10
#[Out]# 2003  5210706.00   533.55  1494.27   ...     1.456  12360.0   300.55
#[Out]# 2004  5407087.00   598.33  1677.77   ...     1.424  14174.0   338.45
#[Out]# 2005  5744550.00   665.32  1905.84   ...     1.456  16394.0   408.86
#[Out]# 2006  5994973.00   738.97  2199.14   ...     1.438  17881.0   476.72
#[Out]# 2007  6236312.00   877.07  2624.24   ...     1.474  20058.0   838.99
#[Out]# 2008  6529045.00  1005.37  3187.39   ...     1.515  22114.0   843.14
#[Out]# 2009  6791495.00  1118.03  3615.77   ...     1.633  24190.0  1107.67
#[Out]# 2010  7110695.00  1304.48  4476.38   ...     1.638  29549.0  1399.16
#[Out]# 2011  7431755.00  1700.87  5243.03   ...     1.670  34214.0  1535.14
#[Out]# 2012  7512997.00  1969.51  5977.27   ...     1.825  37934.0  1579.68
#[Out]# 2013  7599295.00  2110.78  6882.85   ...     1.906  41972.0  2088.14
#[Out]# 2014  8142148.24  2239.29  7042.31   ...       NaN      NaN      NaN
#[Out]# 2015  8460489.28  2581.14  8166.92   ...       NaN      NaN      NaN
#[Out]# 
#[Out]# [22 rows x 14 columns]
get_ipython().run_line_magic('pinfo', 'np.ones_like')

x1
data.xo
data.x0
data
#[Out]#               x1       x2       x3   ...       x12      x13        y
#[Out]# 1994  3831732.00   181.54   448.19   ...     1.029   5321.0    64.87
#[Out]# 1995  3913824.00   214.63   549.97   ...     1.051   6529.0    99.75
#[Out]# 1996  3928907.00   239.56   686.44   ...     1.064   7008.0    88.11
#[Out]# 1997  4282130.00   261.58   802.59   ...     1.092   7694.0   106.07
#[Out]# 1998  4453911.00   283.14   904.57   ...     1.200   8027.0   137.32
#[Out]# 1999  4548852.00   308.58  1000.69   ...     1.198   8549.0   188.14
#[Out]# 2000  4962579.00   348.09  1121.13   ...     1.348   9566.0   219.91
#[Out]# 2001  5029338.00   387.81  1248.29   ...     1.467  10473.0   271.91
#[Out]# 2002  5070216.00   453.49  1370.68   ...     1.560  11469.0   269.10
#[Out]# 2003  5210706.00   533.55  1494.27   ...     1.456  12360.0   300.55
#[Out]# 2004  5407087.00   598.33  1677.77   ...     1.424  14174.0   338.45
#[Out]# 2005  5744550.00   665.32  1905.84   ...     1.456  16394.0   408.86
#[Out]# 2006  5994973.00   738.97  2199.14   ...     1.438  17881.0   476.72
#[Out]# 2007  6236312.00   877.07  2624.24   ...     1.474  20058.0   838.99
#[Out]# 2008  6529045.00  1005.37  3187.39   ...     1.515  22114.0   843.14
#[Out]# 2009  6791495.00  1118.03  3615.77   ...     1.633  24190.0  1107.67
#[Out]# 2010  7110695.00  1304.48  4476.38   ...     1.638  29549.0  1399.16
#[Out]# 2011  7431755.00  1700.87  5243.03   ...     1.670  34214.0  1535.14
#[Out]# 2012  7512997.00  1969.51  5977.27   ...     1.825  37934.0  1579.68
#[Out]# 2013  7599295.00  2110.78  6882.85   ...     1.906  41972.0  2088.14
#[Out]# 2014  8142148.24  2239.29  7042.31   ...       NaN      NaN      NaN
#[Out]# 2015  8460489.28  2581.14  8166.92   ...       NaN      NaN      NaN
#[Out]# 
#[Out]# [22 rows x 14 columns]
data.columns
#[Out]# Index(['x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11',
#[Out]#        'x12', 'x13', 'y'],
#[Out]#       dtype='object')
data[i][range(1994,2014)]
data[i][list(range(1994,2014))]
#[Out]# 1994     525.71
#[Out]# 1995     618.25
#[Out]# 1996     638.94
#[Out]# 1997     656.58
#[Out]# 1998     758.83
#[Out]# 1999     878.26
#[Out]# 2000     923.67
#[Out]# 2001     978.21
#[Out]# 2002    1009.24
#[Out]# 2003    1175.17
#[Out]# 2004    1348.93
#[Out]# 2005    1519.16
#[Out]# 2006    1696.38
#[Out]# 2007    1863.34
#[Out]# 2008    2105.54
#[Out]# 2009    2659.85
#[Out]# 2010    3263.57
#[Out]# 2011    3412.21
#[Out]# 2012    3758.39
#[Out]# 2013    4454.55
#[Out]# Name: x7, dtype: float64
get_ipython().run_line_magic('pinfo', 'np.append')
